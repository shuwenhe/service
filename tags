!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Accepted_202	httplib.h	/^  Accepted_202 = 202,$/;"	e	enum:httplib::StatusCode
AlreadyReported_208	httplib.h	/^  AlreadyReported_208 = 208,$/;"	e	enum:httplib::StatusCode
BadGateway_502	httplib.h	/^  BadGateway_502 = 502,$/;"	e	enum:httplib::StatusCode
BadRequest_400	httplib.h	/^  BadRequest_400 = 400,$/;"	e	enum:httplib::StatusCode
BindIPAddress	httplib.h	/^  BindIPAddress,$/;"	m	class:httplib::Error
CONFIG_H	cnf.h	2;"	d
CPPHTTPLIB_CLIENT_READ_TIMEOUT_SECOND	httplib.h	54;"	d
CPPHTTPLIB_CLIENT_READ_TIMEOUT_USECOND	httplib.h	58;"	d
CPPHTTPLIB_CLIENT_WRITE_TIMEOUT_SECOND	httplib.h	62;"	d
CPPHTTPLIB_CLIENT_WRITE_TIMEOUT_USECOND	httplib.h	66;"	d
CPPHTTPLIB_COMPRESSION_BUFSIZ	httplib.h	122;"	d
CPPHTTPLIB_CONNECTION_TIMEOUT_SECOND	httplib.h	30;"	d
CPPHTTPLIB_CONNECTION_TIMEOUT_USECOND	httplib.h	34;"	d
CPPHTTPLIB_FORM_URL_ENCODED_PAYLOAD_MAX_LENGTH	httplib.h	102;"	d
CPPHTTPLIB_HEADER_MAX_LENGTH	httplib.h	86;"	d
CPPHTTPLIB_HTTPLIB_H	httplib.h	9;"	d
CPPHTTPLIB_IDLE_INTERVAL_SECOND	httplib.h	70;"	d
CPPHTTPLIB_IDLE_INTERVAL_USECOND	httplib.h	75;"	d
CPPHTTPLIB_IDLE_INTERVAL_USECOND	httplib.h	77;"	d
CPPHTTPLIB_IPV6_V6ONLY	httplib.h	114;"	d
CPPHTTPLIB_KEEPALIVE_MAX_COUNT	httplib.h	26;"	d
CPPHTTPLIB_KEEPALIVE_TIMEOUT_CHECK_INTERVAL_USECOND	httplib.h	22;"	d
CPPHTTPLIB_KEEPALIVE_TIMEOUT_SECOND	httplib.h	18;"	d
CPPHTTPLIB_LISTEN_BACKLOG	httplib.h	141;"	d
CPPHTTPLIB_MULTIPART_FORM_DATA_FILE_MAX_COUNT	httplib.h	94;"	d
CPPHTTPLIB_PAYLOAD_MAX_LENGTH	httplib.h	98;"	d
CPPHTTPLIB_RANGE_MAX_COUNT	httplib.h	106;"	d
CPPHTTPLIB_RECV_BUFSIZ	httplib.h	118;"	d
CPPHTTPLIB_RECV_FLAGS	httplib.h	133;"	d
CPPHTTPLIB_REDIRECT_MAX_COUNT	httplib.h	90;"	d
CPPHTTPLIB_REQUEST_URI_MAX_LENGTH	httplib.h	82;"	d
CPPHTTPLIB_SEND_FLAGS	httplib.h	137;"	d
CPPHTTPLIB_SERVER_READ_TIMEOUT_SECOND	httplib.h	38;"	d
CPPHTTPLIB_SERVER_READ_TIMEOUT_USECOND	httplib.h	42;"	d
CPPHTTPLIB_SERVER_WRITE_TIMEOUT_SECOND	httplib.h	46;"	d
CPPHTTPLIB_SERVER_WRITE_TIMEOUT_USECOND	httplib.h	50;"	d
CPPHTTPLIB_TCP_NODELAY	httplib.h	110;"	d
CPPHTTPLIB_THREAD_POOL_COUNT	httplib.h	126;"	d
CPPHTTPLIB_VERSION	httplib.h	11;"	d
Callback	httplib.h	/^  typedef std::function<bool(const char *data, size_t data_len)> Callback;$/;"	t	class:httplib::detail::compressor
Callback	httplib.h	/^  typedef std::function<bool(const char *data, size_t data_len)> Callback;$/;"	t	class:httplib::detail::decompressor
Canceled	httplib.h	/^  Canceled,$/;"	m	class:httplib::Error
Client	httplib.h	/^class Client {$/;"	c	namespace:httplib
Client	httplib.h	/^inline Client::Client(const std::string &host, int port)$/;"	f	class:httplib::Client
Client	httplib.h	/^inline Client::Client(const std::string &host, int port,$/;"	f	class:httplib::Client
Client	httplib.h	/^inline Client::Client(const std::string &scheme_host_port)$/;"	f	class:httplib::Client
Client	httplib.h	/^inline Client::Client(const std::string &scheme_host_port,$/;"	f	class:httplib::Client
ClientImpl	httplib.h	/^class ClientImpl {$/;"	c	namespace:httplib
ClientImpl	httplib.h	/^inline ClientImpl::ClientImpl(const std::string &host)$/;"	f	class:httplib::ClientImpl
ClientImpl	httplib.h	/^inline ClientImpl::ClientImpl(const std::string &host, int port)$/;"	f	class:httplib::ClientImpl
ClientImpl	httplib.h	/^inline ClientImpl::ClientImpl(const std::string &host, int port,$/;"	f	class:httplib::ClientImpl
Compression	httplib.h	/^  Compression,$/;"	m	class:httplib::Error
Conflict_409	httplib.h	/^  Conflict_409 = 409,$/;"	e	enum:httplib::StatusCode
Connection	httplib.h	/^  Connection,$/;"	m	class:httplib::Error
ConnectionTimeout	httplib.h	/^  ConnectionTimeout,$/;"	m	class:httplib::Error
ContentProviderAdapter	httplib.h	/^  explicit ContentProviderAdapter($/;"	f	class:httplib::detail::ContentProviderAdapter
ContentProviderAdapter	httplib.h	/^class ContentProviderAdapter {$/;"	c	namespace:httplib::detail
ContentReader	httplib.h	/^  ContentReader(Reader reader, MultipartReader multipart_reader)$/;"	f	class:httplib::ContentReader
ContentReader	httplib.h	/^class ContentReader {$/;"	c	namespace:httplib
Continue_100	httplib.h	/^  Continue_100 = 100,$/;"	e	enum:httplib::StatusCode
Created_201	httplib.h	/^  Created_201 = 201,$/;"	e	enum:httplib::StatusCode
DATA_SIZE	main.cpp	8;"	d	file:
DataSink	httplib.h	/^  DataSink() : os(&sb_), sb_(*this) {}$/;"	f	class:httplib::DataSink
DataSink	httplib.h	/^class DataSink {$/;"	c	namespace:httplib
Delete	httplib.h	/^inline Result Client::Delete(const std::string &path) {$/;"	f	class:httplib::Client
Delete	httplib.h	/^inline Result Client::Delete(const std::string &path, const Headers &headers) {$/;"	f	class:httplib::Client
Delete	httplib.h	/^inline Result Client::Delete(const std::string &path, const Headers &headers,$/;"	f	class:httplib::Client
Delete	httplib.h	/^inline Result Client::Delete(const std::string &path, const char *body,$/;"	f	class:httplib::Client
Delete	httplib.h	/^inline Result Client::Delete(const std::string &path, const std::string &body,$/;"	f	class:httplib::Client
Delete	httplib.h	/^inline Result ClientImpl::Delete(const std::string &path) {$/;"	f	class:httplib::ClientImpl
Delete	httplib.h	/^inline Result ClientImpl::Delete(const std::string &path, const char *body,$/;"	f	class:httplib::ClientImpl
Delete	httplib.h	/^inline Result ClientImpl::Delete(const std::string &path,$/;"	f	class:httplib::ClientImpl
Delete	httplib.h	/^inline Server &Server::Delete(const std::string &pattern, Handler handler) {$/;"	f	class:httplib::Server
Delete	httplib.h	/^inline Server &Server::Delete(const std::string &pattern,$/;"	f	class:httplib::Server
EarlyHints_103	httplib.h	/^  EarlyHints_103 = 103,$/;"	e	enum:httplib::StatusCode
EncodingType	httplib.h	/^enum class EncodingType { None = 0, Gzip, Brotli };$/;"	c	namespace:httplib::detail
Error	httplib.h	/^enum class Error {$/;"	c	namespace:httplib
ExceedRedirectCount	httplib.h	/^  ExceedRedirectCount,$/;"	m	class:httplib::Error
ExpectationFailed_417	httplib.h	/^  ExpectationFailed_417 = 417,$/;"	e	enum:httplib::StatusCode
FailedDependency_424	httplib.h	/^  FailedDependency_424 = 424,$/;"	e	enum:httplib::StatusCode
FileStat	httplib.h	/^inline FileStat::FileStat(const std::string &path) {$/;"	f	class:httplib::detail::FileStat
FileStat	httplib.h	/^struct FileStat {$/;"	s	namespace:httplib::detail
Forbidden_403	httplib.h	/^  Forbidden_403 = 403,$/;"	e	enum:httplib::StatusCode
Found_302	httplib.h	/^  Found_302 = 302,$/;"	e	enum:httplib::StatusCode
GatewayTimeout_504	httplib.h	/^  GatewayTimeout_504 = 504,$/;"	e	enum:httplib::StatusCode
Get	httplib.h	/^inline Result Client::Get(const std::string &path) { return cli_->Get(path); }$/;"	f	class:httplib::Client
Get	httplib.h	/^inline Result Client::Get(const std::string &path, Progress progress) {$/;"	f	class:httplib::Client
Get	httplib.h	/^inline Result Client::Get(const std::string &path, const Headers &headers) {$/;"	f	class:httplib::Client
Get	httplib.h	/^inline Result Client::Get(const std::string &path, const Headers &headers,$/;"	f	class:httplib::Client
Get	httplib.h	/^inline Result Client::Get(const std::string &path, const Params &params,$/;"	f	class:httplib::Client
Get	httplib.h	/^inline Result Client::Get(const std::string &path,$/;"	f	class:httplib::Client
Get	httplib.h	/^inline Result ClientImpl::Get(const std::string &path) {$/;"	f	class:httplib::ClientImpl
Get	httplib.h	/^inline Result ClientImpl::Get(const std::string &path, Progress progress) {$/;"	f	class:httplib::ClientImpl
Get	httplib.h	/^inline Result ClientImpl::Get(const std::string &path, const Headers &headers) {$/;"	f	class:httplib::ClientImpl
Get	httplib.h	/^inline Result ClientImpl::Get(const std::string &path, const Headers &headers,$/;"	f	class:httplib::ClientImpl
Get	httplib.h	/^inline Result ClientImpl::Get(const std::string &path, const Params &params,$/;"	f	class:httplib::ClientImpl
Get	httplib.h	/^inline Result ClientImpl::Get(const std::string &path,$/;"	f	class:httplib::ClientImpl
Get	httplib.h	/^inline Server &Server::Get(const std::string &pattern, Handler handler) {$/;"	f	class:httplib::Server
Gone_410	httplib.h	/^  Gone_410 = 410,$/;"	e	enum:httplib::StatusCode
Gzip	httplib.h	/^enum class EncodingType { None = 0, Gzip, Brotli };$/;"	m	class:httplib::detail::EncodingType
Handled	httplib.h	/^    Handled,$/;"	m	class:httplib::Server::HandlerResponse
HandlerResponse	httplib.h	/^  enum class HandlerResponse {$/;"	c	class:httplib::Server
Head	httplib.h	/^inline Result Client::Head(const std::string &path) { return cli_->Head(path); }$/;"	f	class:httplib::Client
Head	httplib.h	/^inline Result Client::Head(const std::string &path, const Headers &headers) {$/;"	f	class:httplib::Client
Head	httplib.h	/^inline Result ClientImpl::Head(const std::string &path) {$/;"	f	class:httplib::ClientImpl
Head	httplib.h	/^inline Result ClientImpl::Head(const std::string &path,$/;"	f	class:httplib::ClientImpl
HttpVersionNotSupported_505	httplib.h	/^  HttpVersionNotSupported_505 = 505,$/;"	e	enum:httplib::StatusCode
IMUsed_226	httplib.h	/^  IMUsed_226 = 226,$/;"	e	enum:httplib::StatusCode
ImATeapot_418	httplib.h	/^  ImATeapot_418 = 418,$/;"	e	enum:httplib::StatusCode
InsufficientStorage_507	httplib.h	/^  InsufficientStorage_507 = 507,$/;"	e	enum:httplib::StatusCode
InternalServerError_500	httplib.h	/^  InternalServerError_500 = 500,$/;"	e	enum:httplib::StatusCode
LengthRequired_411	httplib.h	/^  LengthRequired_411 = 411,$/;"	e	enum:httplib::StatusCode
Locked_423	httplib.h	/^  Locked_423 = 423,$/;"	e	enum:httplib::StatusCode
LoopDetected_508	httplib.h	/^  LoopDetected_508 = 508,$/;"	e	enum:httplib::StatusCode
MD5	httplib.h	/^inline std::string MD5(const std::string &s) {$/;"	f	namespace:httplib::detail
MatcherBase	httplib.h	/^class MatcherBase {$/;"	c	namespace:httplib::detail
MethodNotAllowed_405	httplib.h	/^  MethodNotAllowed_405 = 405,$/;"	e	enum:httplib::StatusCode
MisdirectedRequest_421	httplib.h	/^  MisdirectedRequest_421 = 421,$/;"	e	enum:httplib::StatusCode
MountPointEntry	httplib.h	/^  struct MountPointEntry {$/;"	s	class:httplib::Server
MovedPermanently_301	httplib.h	/^  MovedPermanently_301 = 301,$/;"	e	enum:httplib::StatusCode
MultiStatus_207	httplib.h	/^  MultiStatus_207 = 207,$/;"	e	enum:httplib::StatusCode
MultipartFormData	httplib.h	/^struct MultipartFormData {$/;"	s	namespace:httplib
MultipartFormDataParser	httplib.h	/^class MultipartFormDataParser {$/;"	c	namespace:httplib::detail
MultipartFormDataProvider	httplib.h	/^struct MultipartFormDataProvider {$/;"	s	namespace:httplib
MultipleChoices_300	httplib.h	/^  MultipleChoices_300 = 300,$/;"	e	enum:httplib::StatusCode
NOMINMAX	httplib.h	180;"	d
NetworkAuthenticationRequired_511	httplib.h	/^  NetworkAuthenticationRequired_511 = 511,$/;"	e	enum:httplib::StatusCode
NoContent_204	httplib.h	/^  NoContent_204 = 204,$/;"	e	enum:httplib::StatusCode
NonAuthoritativeInformation_203	httplib.h	/^  NonAuthoritativeInformation_203 = 203,$/;"	e	enum:httplib::StatusCode
None	httplib.h	/^enum class EncodingType { None = 0, Gzip, Brotli };$/;"	m	class:httplib::detail::EncodingType
NotAcceptable_406	httplib.h	/^  NotAcceptable_406 = 406,$/;"	e	enum:httplib::StatusCode
NotExtended_510	httplib.h	/^  NotExtended_510 = 510,$/;"	e	enum:httplib::StatusCode
NotFound_404	httplib.h	/^  NotFound_404 = 404,$/;"	e	enum:httplib::StatusCode
NotImplemented_501	httplib.h	/^  NotImplemented_501 = 501,$/;"	e	enum:httplib::StatusCode
NotModified_304	httplib.h	/^  NotModified_304 = 304,$/;"	e	enum:httplib::StatusCode
OK_200	httplib.h	/^  OK_200 = 200,$/;"	e	enum:httplib::StatusCode
Options	httplib.h	/^inline Result Client::Options(const std::string &path) {$/;"	f	class:httplib::Client
Options	httplib.h	/^inline Result Client::Options(const std::string &path, const Headers &headers) {$/;"	f	class:httplib::Client
Options	httplib.h	/^inline Result ClientImpl::Options(const std::string &path) {$/;"	f	class:httplib::ClientImpl
Options	httplib.h	/^inline Result ClientImpl::Options(const std::string &path,$/;"	f	class:httplib::ClientImpl
Options	httplib.h	/^inline Server &Server::Options(const std::string &pattern, Handler handler) {$/;"	f	class:httplib::Server
PKCS7_SIGNER_INFO	httplib.h	271;"	d
PORT	index.cpp	/^const int PORT = 8080;$/;"	v
PartialContent_206	httplib.h	/^  PartialContent_206 = 206,$/;"	e	enum:httplib::StatusCode
Patch	httplib.h	/^inline Result Client::Patch(const std::string &path) {$/;"	f	class:httplib::Client
Patch	httplib.h	/^inline Result Client::Patch(const std::string &path, const Headers &headers,$/;"	f	class:httplib::Client
Patch	httplib.h	/^inline Result Client::Patch(const std::string &path, const char *body,$/;"	f	class:httplib::Client
Patch	httplib.h	/^inline Result Client::Patch(const std::string &path, const std::string &body,$/;"	f	class:httplib::Client
Patch	httplib.h	/^inline Result Client::Patch(const std::string &path, size_t content_length,$/;"	f	class:httplib::Client
Patch	httplib.h	/^inline Result Client::Patch(const std::string &path,$/;"	f	class:httplib::Client
Patch	httplib.h	/^inline Result ClientImpl::Patch(const std::string &path) {$/;"	f	class:httplib::ClientImpl
Patch	httplib.h	/^inline Result ClientImpl::Patch(const std::string &path, const Headers &headers,$/;"	f	class:httplib::ClientImpl
Patch	httplib.h	/^inline Result ClientImpl::Patch(const std::string &path, const char *body,$/;"	f	class:httplib::ClientImpl
Patch	httplib.h	/^inline Result ClientImpl::Patch(const std::string &path, size_t content_length,$/;"	f	class:httplib::ClientImpl
Patch	httplib.h	/^inline Result ClientImpl::Patch(const std::string &path,$/;"	f	class:httplib::ClientImpl
Patch	httplib.h	/^inline Server &Server::Patch(const std::string &pattern, Handler handler) {$/;"	f	class:httplib::Server
Patch	httplib.h	/^inline Server &Server::Patch(const std::string &pattern,$/;"	f	class:httplib::Server
PathParamsMatcher	httplib.h	/^inline PathParamsMatcher::PathParamsMatcher(const std::string &pattern) {$/;"	f	class:httplib::detail::PathParamsMatcher
PayloadTooLarge_413	httplib.h	/^  PayloadTooLarge_413 = 413,$/;"	e	enum:httplib::StatusCode
PaymentRequired_402	httplib.h	/^  PaymentRequired_402 = 402,$/;"	e	enum:httplib::StatusCode
PermanentRedirect_308	httplib.h	/^  PermanentRedirect_308 = 308,$/;"	e	enum:httplib::StatusCode
Post	httplib.h	/^Client::Post(const std::string &path, const Headers &headers,$/;"	f	class:httplib::Client
Post	httplib.h	/^ClientImpl::Post(const std::string &path, const Headers &headers,$/;"	f	class:httplib::ClientImpl
Post	httplib.h	/^inline Result Client::Post(const std::string &path) { return cli_->Post(path); }$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Result Client::Post(const std::string &path, const Headers &headers) {$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Result Client::Post(const std::string &path, const Headers &headers,$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Result Client::Post(const std::string &path, const Params &params) {$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Result Client::Post(const std::string &path, const char *body,$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Result Client::Post(const std::string &path, const std::string &body,$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Result Client::Post(const std::string &path, size_t content_length,$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Result Client::Post(const std::string &path,$/;"	f	class:httplib::Client
Post	httplib.h	/^inline Result ClientImpl::Post(const std::string &path) {$/;"	f	class:httplib::ClientImpl
Post	httplib.h	/^inline Result ClientImpl::Post(const std::string &path, const Headers &headers,$/;"	f	class:httplib::ClientImpl
Post	httplib.h	/^inline Result ClientImpl::Post(const std::string &path, const Params &params) {$/;"	f	class:httplib::ClientImpl
Post	httplib.h	/^inline Result ClientImpl::Post(const std::string &path, const char *body,$/;"	f	class:httplib::ClientImpl
Post	httplib.h	/^inline Result ClientImpl::Post(const std::string &path, const std::string &body,$/;"	f	class:httplib::ClientImpl
Post	httplib.h	/^inline Result ClientImpl::Post(const std::string &path, size_t content_length,$/;"	f	class:httplib::ClientImpl
Post	httplib.h	/^inline Result ClientImpl::Post(const std::string &path,$/;"	f	class:httplib::ClientImpl
Post	httplib.h	/^inline Server &Server::Post(const std::string &pattern, Handler handler) {$/;"	f	class:httplib::Server
Post	httplib.h	/^inline Server &Server::Post(const std::string &pattern,$/;"	f	class:httplib::Server
PreconditionFailed_412	httplib.h	/^  PreconditionFailed_412 = 412,$/;"	e	enum:httplib::StatusCode
PreconditionRequired_428	httplib.h	/^  PreconditionRequired_428 = 428,$/;"	e	enum:httplib::StatusCode
Processing_102	httplib.h	/^  Processing_102 = 102,$/;"	e	enum:httplib::StatusCode
ProxyAuthenticationRequired_407	httplib.h	/^  ProxyAuthenticationRequired_407 = 407,$/;"	e	enum:httplib::StatusCode
ProxyConnection	httplib.h	/^  ProxyConnection,$/;"	m	class:httplib::Error
Put	httplib.h	/^Client::Put(const std::string &path, const Headers &headers,$/;"	f	class:httplib::Client
Put	httplib.h	/^ClientImpl::Put(const std::string &path, const Headers &headers,$/;"	f	class:httplib::ClientImpl
Put	httplib.h	/^inline Result Client::Put(const std::string &path) { return cli_->Put(path); }$/;"	f	class:httplib::Client
Put	httplib.h	/^inline Result Client::Put(const std::string &path, const Headers &headers,$/;"	f	class:httplib::Client
Put	httplib.h	/^inline Result Client::Put(const std::string &path, const Params &params) {$/;"	f	class:httplib::Client
Put	httplib.h	/^inline Result Client::Put(const std::string &path, const char *body,$/;"	f	class:httplib::Client
Put	httplib.h	/^inline Result Client::Put(const std::string &path, const std::string &body,$/;"	f	class:httplib::Client
Put	httplib.h	/^inline Result Client::Put(const std::string &path, size_t content_length,$/;"	f	class:httplib::Client
Put	httplib.h	/^inline Result Client::Put(const std::string &path,$/;"	f	class:httplib::Client
Put	httplib.h	/^inline Result ClientImpl::Put(const std::string &path) {$/;"	f	class:httplib::ClientImpl
Put	httplib.h	/^inline Result ClientImpl::Put(const std::string &path, const Headers &headers,$/;"	f	class:httplib::ClientImpl
Put	httplib.h	/^inline Result ClientImpl::Put(const std::string &path, const Params &params) {$/;"	f	class:httplib::ClientImpl
Put	httplib.h	/^inline Result ClientImpl::Put(const std::string &path, const char *body,$/;"	f	class:httplib::ClientImpl
Put	httplib.h	/^inline Result ClientImpl::Put(const std::string &path, const std::string &body,$/;"	f	class:httplib::ClientImpl
Put	httplib.h	/^inline Result ClientImpl::Put(const std::string &path, size_t content_length,$/;"	f	class:httplib::ClientImpl
Put	httplib.h	/^inline Result ClientImpl::Put(const std::string &path,$/;"	f	class:httplib::ClientImpl
Put	httplib.h	/^inline Server &Server::Put(const std::string &pattern, Handler handler) {$/;"	f	class:httplib::Server
Put	httplib.h	/^inline Server &Server::Put(const std::string &pattern,$/;"	f	class:httplib::Server
RangeNotSatisfiable_416	httplib.h	/^  RangeNotSatisfiable_416 = 416,$/;"	e	enum:httplib::StatusCode
Read	httplib.h	/^  Read,$/;"	m	class:httplib::Error
RegexMatcher	httplib.h	/^  RegexMatcher(const std::string &pattern) : regex_(pattern) {}$/;"	f	class:httplib::detail::final
Request	httplib.h	/^struct Request {$/;"	s	namespace:httplib
RequestHeaderFieldsTooLarge_431	httplib.h	/^  RequestHeaderFieldsTooLarge_431 = 431,$/;"	e	enum:httplib::StatusCode
RequestTimeout_408	httplib.h	/^  RequestTimeout_408 = 408,$/;"	e	enum:httplib::StatusCode
ResetContent_205	httplib.h	/^  ResetContent_205 = 205,$/;"	e	enum:httplib::StatusCode
Response	httplib.h	/^struct Response {$/;"	s	namespace:httplib
Result	httplib.h	/^  Result(std::unique_ptr<Response> &&res, Error err,$/;"	f	class:httplib::Result
Result	httplib.h	/^class Result {$/;"	c	namespace:httplib
SHA_256	httplib.h	/^inline std::string SHA_256(const std::string &s) {$/;"	f	namespace:httplib::detail
SHA_512	httplib.h	/^inline std::string SHA_512(const std::string &s) {$/;"	f	namespace:httplib::detail
SSLClient	httplib.h	/^inline SSLClient::SSLClient(const std::string &host)$/;"	f	class:httplib::SSLClient
SSLClient	httplib.h	/^inline SSLClient::SSLClient(const std::string &host, int port)$/;"	f	class:httplib::SSLClient
SSLClient	httplib.h	/^inline SSLClient::SSLClient(const std::string &host, int port,$/;"	f	class:httplib::SSLClient
SSLConnection	httplib.h	/^  SSLConnection,$/;"	m	class:httplib::Error
SSLInit	httplib.h	/^  SSLInit() {$/;"	f	class:httplib::detail::SSLInit
SSLInit	httplib.h	/^class SSLInit {$/;"	c	namespace:httplib::detail
SSLLoadingCerts	httplib.h	/^  SSLLoadingCerts,$/;"	m	class:httplib::Error
SSLPeerCouldBeClosed_	httplib.h	/^  SSLPeerCouldBeClosed_,$/;"	m	class:httplib::Error
SSLServer	httplib.h	/^class SSLServer : public Server {$/;"	c	namespace:httplib
SSLServer	httplib.h	/^inline SSLServer::SSLServer($/;"	f	class:httplib::SSLServer
SSLServer	httplib.h	/^inline SSLServer::SSLServer(X509 *cert, EVP_PKEY *private_key,$/;"	f	class:httplib::SSLServer
SSLServer	httplib.h	/^inline SSLServer::SSLServer(const char *cert_path, const char *private_key_path,$/;"	f	class:httplib::SSLServer
SSLServerHostnameVerification	httplib.h	/^  SSLServerHostnameVerification,$/;"	m	class:httplib::Error
SSLServerVerification	httplib.h	/^  SSLServerVerification,$/;"	m	class:httplib::Error
SSLSocketStream	httplib.h	/^inline SSLSocketStream::SSLSocketStream(socket_t sock, SSL *ssl,$/;"	f	class:httplib::detail::SSLSocketStream
SSL_get1_peer_certificate	httplib.h	300;"	d
S_ISDIR	httplib.h	176;"	d
S_ISREG	httplib.h	172;"	d
SeeOther_303	httplib.h	/^  SeeOther_303 = 303,$/;"	e	enum:httplib::StatusCode
Server	httplib.h	/^class Server {$/;"	c	namespace:httplib
Server	httplib.h	/^inline Server::Server()$/;"	f	class:httplib::Server
ServiceUnavailable_503	httplib.h	/^  ServiceUnavailable_503 = 503,$/;"	e	enum:httplib::StatusCode
Socket	httplib.h	/^  struct Socket {$/;"	s	class:httplib::ClientImpl
SocketStream	httplib.h	/^inline SocketStream::SocketStream(socket_t sock, time_t read_timeout_sec,$/;"	f	class:httplib::detail::SocketStream
StatusCode	httplib.h	/^enum StatusCode {$/;"	g	namespace:httplib
Stream	httplib.h	/^class Stream {$/;"	c	namespace:httplib
Success	httplib.h	/^  Success = 0,$/;"	m	class:httplib::Error
SwitchingProtocol_101	httplib.h	/^  SwitchingProtocol_101 = 101,$/;"	e	enum:httplib::StatusCode
TaskQueue	httplib.h	/^class TaskQueue {$/;"	c	namespace:httplib
TemporaryRedirect_307	httplib.h	/^  TemporaryRedirect_307 = 307,$/;"	e	enum:httplib::StatusCode
ThreadPool	httplib.h	/^  explicit ThreadPool(size_t n, size_t mqr = 0)$/;"	f	class:httplib::final
TooEarly_425	httplib.h	/^  TooEarly_425 = 425,$/;"	e	enum:httplib::StatusCode
TooManyRequests_429	httplib.h	/^  TooManyRequests_429 = 429,$/;"	e	enum:httplib::StatusCode
USE_IF2IP	httplib.h	3582;"	d
Unauthorized_401	httplib.h	/^  Unauthorized_401 = 401,$/;"	e	enum:httplib::StatusCode
UnavailableForLegalReasons_451	httplib.h	/^  UnavailableForLegalReasons_451 = 451,$/;"	e	enum:httplib::StatusCode
Unhandled	httplib.h	/^    Unhandled,$/;"	m	class:httplib::Server::HandlerResponse
Unknown	httplib.h	/^  Unknown,$/;"	m	class:httplib::Error
UnprocessableContent_422	httplib.h	/^  UnprocessableContent_422 = 422,$/;"	e	enum:httplib::StatusCode
UnsupportedMediaType_415	httplib.h	/^  UnsupportedMediaType_415 = 415,$/;"	e	enum:httplib::StatusCode
UnsupportedMultipartBoundaryChars	httplib.h	/^  UnsupportedMultipartBoundaryChars,$/;"	m	class:httplib::Error
UpgradeRequired_426	httplib.h	/^  UpgradeRequired_426 = 426,$/;"	e	enum:httplib::StatusCode
UriTooLong_414	httplib.h	/^  UriTooLong_414 = 414,$/;"	e	enum:httplib::StatusCode
UseProxy_305	httplib.h	/^  UseProxy_305 = 305,$/;"	e	enum:httplib::StatusCode
VariantAlsoNegotiates_506	httplib.h	/^  VariantAlsoNegotiates_506 = 506,$/;"	e	enum:httplib::StatusCode
WSA_FLAG_NO_HANDLE_INHERIT	httplib.h	188;"	d
WSInit	httplib.h	/^  WSInit() {$/;"	f	class:httplib::detail::WSInit
WSInit	httplib.h	/^class WSInit {$/;"	c	namespace:httplib::detail
Write	httplib.h	/^  Write,$/;"	m	class:httplib::Error
X509_CERT_PAIR	httplib.h	269;"	d
X509_EXTENSIONS	httplib.h	270;"	d
X509_NAME	httplib.h	268;"	d
_CRT_NONSTDC_NO_DEPRECATE	httplib.h	154;"	d
_CRT_SECURE_NO_WARNINGS	httplib.h	150;"	d
_t	httplib.h	/^inline constexpr unsigned int operator""_t(const char *s, size_t l) {$/;"	f	namespace:httplib::detail::udl
add_certs_to_x509_store	httplib.h	/^inline bool add_certs_to_x509_store(CFArrayRef certs, X509_STORE *store) {$/;"	f	namespace:httplib::detail
addr_	httplib.h	/^  void *addr_ = nullptr;$/;"	m	class:httplib::detail::mmap
addr_map_	httplib.h	/^  std::map<std::string, std::string> addr_map_;$/;"	m	class:httplib::ClientImpl
address_family_	httplib.h	/^  int address_family_ = AF_UNSPEC;$/;"	m	class:httplib::ClientImpl
address_family_	httplib.h	/^  int address_family_ = AF_UNSPEC;$/;"	m	class:httplib::Server
adjust_host_string	httplib.h	/^ClientImpl::adjust_host_string(const std::string &host) const {$/;"	f	class:httplib::ClientImpl
append	httplib.h	/^inline void stream_line_reader::append(char c) {$/;"	f	class:httplib::detail::stream_line_reader
append_query_params	httplib.h	/^inline std::string append_query_params(const std::string &path,$/;"	f	namespace:httplib
apply_ranges	httplib.h	/^inline void Server::apply_ranges(const Request &req, Response &res,$/;"	f	class:httplib::Server
authorization_count_	httplib.h	/^  size_t authorization_count_ = 0;$/;"	m	struct:httplib::Request
base64_encode	httplib.h	/^inline std::string base64_encode(const std::string &in) {$/;"	f	namespace:httplib::detail
base_dir	httplib.h	/^    std::string base_dir;$/;"	m	struct:httplib::Server::MountPointEntry
base_dirs_	httplib.h	/^  std::vector<MountPointEntry> base_dirs_;$/;"	m	class:httplib::Server
basic_auth_password_	httplib.h	/^  std::string basic_auth_password_;$/;"	m	class:httplib::ClientImpl
basic_auth_username_	httplib.h	/^  std::string basic_auth_username_;$/;"	m	class:httplib::ClientImpl
bearer_token_auth_token_	httplib.h	/^  std::string bearer_token_auth_token_;$/;"	m	class:httplib::ClientImpl
bind_internal	httplib.h	/^inline int Server::bind_internal(const std::string &host, int port,$/;"	f	class:httplib::Server
bind_ip_address	httplib.h	/^inline bool bind_ip_address(socket_t sock, const std::string &host) {$/;"	f	namespace:httplib::detail
bind_to_any_port	httplib.h	/^inline int Server::bind_to_any_port(const std::string &host, int socket_flags) {$/;"	f	class:httplib::Server
bind_to_port	httplib.h	/^inline bool Server::bind_to_port(const std::string &host, int port,$/;"	f	class:httplib::Server
body	httplib.h	/^  std::string body;$/;"	m	struct:httplib::Request
body	httplib.h	/^  std::string body;$/;"	m	struct:httplib::Response
boundary_	httplib.h	/^  std::string boundary_;$/;"	m	class:httplib::detail::MultipartFormDataParser
brotli_compressor	httplib.h	/^inline brotli_compressor::brotli_compressor() {$/;"	f	class:httplib::detail::brotli_compressor
brotli_decompressor	httplib.h	/^inline brotli_decompressor::brotli_decompressor() {$/;"	f	class:httplib::detail::brotli_decompressor
buf_	httplib.h	/^  std::string buf_;$/;"	m	class:httplib::detail::MultipartFormDataParser
buf_append	httplib.h	/^  void buf_append(const char *data, size_t n) {$/;"	f	class:httplib::detail::MultipartFormDataParser
buf_data	httplib.h	/^  const char *buf_data() const { return &buf_[buf_spos_]; }$/;"	f	class:httplib::detail::MultipartFormDataParser
buf_epos_	httplib.h	/^  size_t buf_epos_ = 0;$/;"	m	class:httplib::detail::MultipartFormDataParser
buf_erase	httplib.h	/^  void buf_erase(size_t size) { buf_spos_ += size; }$/;"	f	class:httplib::detail::MultipartFormDataParser
buf_find	httplib.h	/^  size_t buf_find(const std::string &s) const {$/;"	f	class:httplib::detail::MultipartFormDataParser
buf_head	httplib.h	/^  std::string buf_head(size_t l) const { return buf_.substr(buf_spos_, l); }$/;"	f	class:httplib::detail::MultipartFormDataParser
buf_size	httplib.h	/^  size_t buf_size() const { return buf_epos_ - buf_spos_; }$/;"	f	class:httplib::detail::MultipartFormDataParser
buf_spos_	httplib.h	/^  size_t buf_spos_ = 0;$/;"	m	class:httplib::detail::MultipartFormDataParser
buf_start_with	httplib.h	/^  bool buf_start_with(const std::string &s) const {$/;"	f	class:httplib::detail::MultipartFormDataParser
buffer	httplib.h	/^  std::string buffer;$/;"	m	class:httplib::detail::final
ca_cert_dir_path_	httplib.h	/^  std::string ca_cert_dir_path_;$/;"	m	class:httplib::ClientImpl
ca_cert_file_path_	httplib.h	/^  std::string ca_cert_file_path_;$/;"	m	class:httplib::ClientImpl
ca_cert_store_	httplib.h	/^  X509_STORE *ca_cert_store_ = nullptr;$/;"	m	class:httplib::ClientImpl
can_compress_content_type	httplib.h	/^inline bool can_compress_content_type(const std::string &content_type) {$/;"	f	namespace:httplib::detail
case_ignore	httplib.h	/^namespace case_ignore {$/;"	n	namespace:httplib::detail
cf_object_ptr_deleter	httplib.h	/^inline void cf_object_ptr_deleter(CFTypeRef obj) {$/;"	f	namespace:httplib::detail
check_host_name	httplib.h	/^inline bool SSLClient::check_host_name(const char *pattern,$/;"	f	class:httplib::SSLClient
clear_file_info	httplib.h	/^  void clear_file_info() {$/;"	f	class:httplib::detail::MultipartFormDataParser
cli_	httplib.h	/^  std::unique_ptr<ClientImpl> cli_;$/;"	m	class:httplib::Client
client_cert_path_	httplib.h	/^  std::string client_cert_path_;$/;"	m	class:httplib::ClientImpl
client_key_path_	httplib.h	/^  std::string client_key_path_;$/;"	m	class:httplib::ClientImpl
close	httplib.h	/^inline void mmap::close() {$/;"	f	class:httplib::detail::mmap
close_socket	httplib.h	/^inline int close_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
close_socket	httplib.h	/^inline void ClientImpl::close_socket(Socket &socket) {$/;"	f	class:httplib::ClientImpl
compress	httplib.h	/^inline bool brotli_compressor::compress(const char *data, size_t data_length,$/;"	f	class:httplib::detail::brotli_compressor
compress	httplib.h	/^inline bool gzip_compressor::compress(const char *data, size_t data_length,$/;"	f	class:httplib::detail::gzip_compressor
compress	httplib.h	/^inline bool nocompressor::compress(const char *data, size_t data_length,$/;"	f	class:httplib::detail::nocompressor
compress_	httplib.h	/^  bool compress_ = false;$/;"	m	class:httplib::ClientImpl
compressor	httplib.h	/^class compressor {$/;"	c	namespace:httplib::detail
cond_	httplib.h	/^  std::condition_variable cond_;$/;"	m	class:httplib::final
connect_with_proxy	httplib.h	/^inline bool SSLClient::connect_with_proxy(Socket &socket, Response &res,$/;"	f	class:httplib::SSLClient
connection_timeout_sec_	httplib.h	/^  time_t connection_timeout_sec_ = CPPHTTPLIB_CONNECTION_TIMEOUT_SECOND;$/;"	m	class:httplib::ClientImpl
connection_timeout_usec_	httplib.h	/^  time_t connection_timeout_usec_ = CPPHTTPLIB_CONNECTION_TIMEOUT_USECOND;$/;"	m	class:httplib::ClientImpl
content	httplib.h	/^  std::string content;$/;"	m	struct:httplib::MultipartFormData
content_length_	httplib.h	/^  size_t content_length_ = 0;$/;"	m	struct:httplib::Request
content_length_	httplib.h	/^  size_t content_length_ = 0;$/;"	m	struct:httplib::Response
content_provider_	httplib.h	/^  ContentProvider content_provider_;$/;"	m	struct:httplib::Request
content_provider_	httplib.h	/^  ContentProvider content_provider_;$/;"	m	struct:httplib::Response
content_provider_	httplib.h	/^  ContentProviderWithoutLength content_provider_;$/;"	m	class:httplib::detail::ContentProviderAdapter
content_provider_resource_releaser_	httplib.h	/^  ContentProviderResourceReleaser content_provider_resource_releaser_;$/;"	m	struct:httplib::Response
content_provider_success_	httplib.h	/^  bool content_provider_success_ = false;$/;"	m	struct:httplib::Response
content_receiver	httplib.h	/^  ContentReceiverWithProgress content_receiver;$/;"	m	struct:httplib::Request
content_type	httplib.h	/^  std::string content_type;$/;"	m	struct:httplib::MultipartFormData
content_type	httplib.h	/^  std::string content_type;$/;"	m	struct:httplib::MultipartFormDataProvider
copy_settings	httplib.h	/^inline void ClientImpl::copy_settings(const ClientImpl &rhs) {$/;"	f	class:httplib::ClientImpl
create_and_connect_socket	httplib.h	/^inline bool ClientImpl::create_and_connect_socket(Socket &socket,$/;"	f	class:httplib::ClientImpl
create_and_connect_socket	httplib.h	/^inline bool SSLClient::create_and_connect_socket(Socket &socket, Error &error) {$/;"	f	class:httplib::SSLClient
create_ca_cert_store	httplib.h	/^inline X509_STORE *ClientImpl::create_ca_cert_store(const char *ca_cert,$/;"	f	class:httplib::ClientImpl
create_client_socket	httplib.h	/^inline socket_t ClientImpl::create_client_socket(Error &error) const {$/;"	f	class:httplib::ClientImpl
create_client_socket	httplib.h	/^inline socket_t create_client_socket($/;"	f	namespace:httplib::detail
create_server_socket	httplib.h	/^Server::create_server_socket(const std::string &host, int port,$/;"	f	class:httplib::Server
create_socket	httplib.h	/^socket_t create_socket(const std::string &host, const std::string &ip, int port,$/;"	f	namespace:httplib::detail
crlf_	httplib.h	/^  const std::string crlf_ = "\\r\\n";$/;"	m	class:httplib::detail::MultipartFormDataParser
crlf_dash_boundary_	httplib.h	/^  std::string crlf_dash_boundary_;$/;"	m	class:httplib::detail::MultipartFormDataParser
ctx_	httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::SSLServer
ctx_	httplib.h	/^  SSL_CTX *ctx_;$/;"	m	class:httplib::final
ctx_mutex_	httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::SSLServer
ctx_mutex_	httplib.h	/^  std::mutex ctx_mutex_;$/;"	m	class:httplib::final
dash_	httplib.h	/^  const std::string dash_ = "--";$/;"	m	class:httplib::detail::MultipartFormDataParser
dash_boundary_crlf_	httplib.h	/^  std::string dash_boundary_crlf_;$/;"	m	class:httplib::detail::MultipartFormDataParser
data	httplib.h	/^inline const char *mmap::data() const {$/;"	f	class:httplib::detail::mmap
data_sink_streambuf	httplib.h	/^    explicit data_sink_streambuf(DataSink &sink) : sink_(sink) {}$/;"	f	class:httplib::DataSink::final
db	cnf.h	/^const char* db = "crmeb_merchant";$/;"	v
decode_url	httplib.h	/^inline std::string decode_url(const std::string &s,$/;"	f	namespace:httplib::detail
decoder_r	httplib.h	/^  BrotliDecoderResult decoder_r;$/;"	m	class:httplib::detail::final
decoder_s	httplib.h	/^  BrotliDecoderState *decoder_s = nullptr;$/;"	m	class:httplib::detail::final
decommission	httplib.h	/^inline void Server::decommission() { is_decommisioned = true; }$/;"	f	class:httplib::Server
decompress	httplib.h	/^inline bool brotli_decompressor::decompress(const char *data,$/;"	f	class:httplib::detail::brotli_decompressor
decompress	httplib.h	/^inline bool gzip_decompressor::decompress(const char *data, size_t data_length,$/;"	f	class:httplib::detail::gzip_decompressor
decompress_	httplib.h	/^  bool decompress_ = true;$/;"	m	class:httplib::ClientImpl
decompressor	httplib.h	/^class decompressor {$/;"	c	namespace:httplib::detail
default_file_mimetype_	httplib.h	/^  std::string default_file_mimetype_ = "application\/octet-stream";$/;"	m	class:httplib::Server
default_headers_	httplib.h	/^  Headers default_headers_;$/;"	m	class:httplib::ClientImpl
default_headers_	httplib.h	/^  Headers default_headers_;$/;"	m	class:httplib::Server
default_socket_options	httplib.h	/^inline void default_socket_options(socket_t sock) {$/;"	f	namespace:httplib
delete_handlers_	httplib.h	/^  Handlers delete_handlers_;$/;"	m	class:httplib::Server
delete_handlers_for_content_reader_	httplib.h	/^  HandlersForContentReader delete_handlers_for_content_reader_;$/;"	m	class:httplib::Server
detail	httplib.h	/^namespace detail {$/;"	n	namespace:httplib
digest_auth_password_	httplib.h	/^  std::string digest_auth_password_;$/;"	m	class:httplib::ClientImpl
digest_auth_username_	httplib.h	/^  std::string digest_auth_username_;$/;"	m	class:httplib::ClientImpl
dispatch_request	httplib.h	/^inline bool Server::dispatch_request(Request &req, Response &res,$/;"	f	class:httplib::Server
dispatch_request_for_content_reader	httplib.h	/^inline bool Server::dispatch_request_for_content_reader($/;"	f	class:httplib::Server
divide	httplib.h	/^divide(const char *data, std::size_t size, char d,$/;"	f	namespace:httplib::detail
divide	httplib.h	/^divide(const std::string &str, char d,$/;"	f	namespace:httplib::detail
done	httplib.h	/^  std::function<void()> done;$/;"	m	class:httplib::DataSink
done_with_trailer	httplib.h	/^  std::function<void(const Headers &trailer)> done_with_trailer;$/;"	m	class:httplib::DataSink
duration_to_sec_and_usec	httplib.h	/^inline void duration_to_sec_and_usec(const T &duration, U callback) {$/;"	f	namespace:httplib::detail
enable_server_certificate_verification	httplib.h	/^inline void Client::enable_server_certificate_verification(bool enabled) {$/;"	f	class:httplib::Client
enable_server_certificate_verification	httplib.h	/^inline void ClientImpl::enable_server_certificate_verification(bool enabled) {$/;"	f	class:httplib::ClientImpl
enable_server_hostname_verification	httplib.h	/^inline void Client::enable_server_hostname_verification(bool enabled) {$/;"	f	class:httplib::Client
enable_server_hostname_verification	httplib.h	/^inline void ClientImpl::enable_server_hostname_verification(bool enabled) {$/;"	f	class:httplib::ClientImpl
encode_query_param	httplib.h	/^inline std::string encode_query_param(const std::string &value) {$/;"	f	namespace:httplib::detail
encode_url	httplib.h	/^inline std::string encode_url(const std::string &s) {$/;"	f	namespace:httplib::detail
encoding_type	httplib.h	/^inline EncodingType encoding_type(const Request &req, const Response &res) {$/;"	f	namespace:httplib::detail
end_with_crlf	httplib.h	/^inline bool stream_line_reader::end_with_crlf() const {$/;"	f	class:httplib::detail::stream_line_reader
equal	httplib.h	/^inline bool equal(const std::string &a, const std::string &b) {$/;"	f	namespace:httplib::detail::case_ignore
equal_to	httplib.h	/^struct equal_to {$/;"	s	namespace:httplib::detail::case_ignore
err_	httplib.h	/^  Error err_ = Error::Unknown;$/;"	m	class:httplib::Result
error	httplib.h	/^  Error error() const { return err_; }$/;"	f	class:httplib::Result
error_handler_	httplib.h	/^  HandlerWithResponse error_handler_;$/;"	m	class:httplib::Server
escape_abstract_namespace_unix_domain	httplib.h	/^inline std::string escape_abstract_namespace_unix_domain(const std::string &s) {$/;"	f	namespace:httplib::detail
exception_handler_	httplib.h	/^  ExceptionHandler exception_handler_;$/;"	m	class:httplib::Server
execute_on_destruction	httplib.h	/^  bool execute_on_destruction;$/;"	m	struct:httplib::detail::scope_exit
exit_function	httplib.h	/^  std::function<void(void)> exit_function;$/;"	m	struct:httplib::detail::scope_exit
expect_100_continue_handler_	httplib.h	/^  Expect100ContinueHandler expect_100_continue_handler_;$/;"	m	class:httplib::Server
expect_content	httplib.h	/^inline bool expect_content(const Request &req) {$/;"	f	namespace:httplib::detail
fd_	httplib.h	/^  int fd_ = -1;$/;"	m	class:httplib::detail::mmap
file_	httplib.h	/^  MultipartFormData file_;$/;"	m	class:httplib::detail::MultipartFormDataParser
file_content_content_type_	httplib.h	/^  std::string file_content_content_type_;$/;"	m	struct:httplib::Response
file_content_path_	httplib.h	/^  std::string file_content_path_;$/;"	m	struct:httplib::Response
file_extension	httplib.h	/^inline std::string file_extension(const std::string &path) {$/;"	f	namespace:httplib::detail
file_extension_and_mimetype_map_	httplib.h	/^  std::map<std::string, std::string> file_extension_and_mimetype_map_;$/;"	m	class:httplib::Server
file_request_handler_	httplib.h	/^  Handler file_request_handler_;$/;"	m	class:httplib::Server
filename	httplib.h	/^  std::string filename;$/;"	m	struct:httplib::MultipartFormData
filename	httplib.h	/^  std::string filename;$/;"	m	struct:httplib::MultipartFormDataProvider
files	httplib.h	/^  MultipartFormDataMap files;$/;"	m	struct:httplib::Request
final	httplib.h	/^  class data_sink_streambuf final : public std::streambuf {$/;"	c	class:httplib::DataSink
final	httplib.h	/^class BufferStream final : public Stream {$/;"	c	namespace:httplib::detail
final	httplib.h	/^class PathParamsMatcher final : public MatcherBase {$/;"	c	namespace:httplib::detail
final	httplib.h	/^class RegexMatcher final : public MatcherBase {$/;"	c	namespace:httplib::detail
final	httplib.h	/^class SSLClient final : public ClientImpl {$/;"	c	namespace:httplib
final	httplib.h	/^class SSLSocketStream final : public Stream {$/;"	c	namespace:httplib::detail
final	httplib.h	/^class SocketStream final : public Stream {$/;"	c	namespace:httplib::detail
final	httplib.h	/^class ThreadPool final : public TaskQueue {$/;"	c	namespace:httplib
final	httplib.h	/^class brotli_compressor final : public compressor {$/;"	c	namespace:httplib::detail
final	httplib.h	/^class brotli_decompressor final : public decompressor {$/;"	c	namespace:httplib::detail
final	httplib.h	/^class gzip_compressor final : public compressor {$/;"	c	namespace:httplib::detail
final	httplib.h	/^class gzip_decompressor final : public decompressor {$/;"	c	namespace:httplib::detail
final	httplib.h	/^class nocompressor final : public compressor {$/;"	c	namespace:httplib::detail
find_content_type	httplib.h	/^find_content_type(const std::string &path,$/;"	f	namespace:httplib::detail
fixed_buffer_	httplib.h	/^  char *fixed_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
fixed_buffer_size_	httplib.h	/^  const size_t fixed_buffer_size_;$/;"	m	class:httplib::detail::stream_line_reader
fixed_buffer_used_size_	httplib.h	/^  size_t fixed_buffer_used_size_ = 0;$/;"	m	class:httplib::detail::stream_line_reader
follow_location_	httplib.h	/^  bool follow_location_ = false;$/;"	m	class:httplib::ClientImpl
from_hex_to_i	httplib.h	/^inline bool from_hex_to_i(const std::string &s, size_t i, size_t cnt,$/;"	f	namespace:httplib::detail
from_i_to_hex	httplib.h	/^inline std::string from_i_to_hex(size_t n) {$/;"	f	namespace:httplib::detail
generate_price	main.cpp	/^void generate_price(double *price,int size){$/;"	f
get_bearer_token_auth	httplib.h	/^inline std::string get_bearer_token_auth(const Request &req) {$/;"	f	namespace:httplib
get_buffer	httplib.h	/^inline const std::string &BufferStream::get_buffer() const { return buffer; }$/;"	f	class:httplib::detail::BufferStream
get_file_value	httplib.h	/^inline MultipartFormData Request::get_file_value(const std::string &key) const {$/;"	f	class:httplib::Request
get_file_values	httplib.h	/^Request::get_file_values(const std::string &key) const {$/;"	f	class:httplib::Request
get_handlers_	httplib.h	/^  Handlers get_handlers_;$/;"	m	class:httplib::Server
get_header_value	httplib.h	/^inline const char *get_header_value(const Headers &headers,$/;"	f	namespace:httplib::detail
get_header_value	httplib.h	/^inline std::string Request::get_header_value(const std::string &key,$/;"	f	class:httplib::Request
get_header_value	httplib.h	/^inline std::string Response::get_header_value(const std::string &key,$/;"	f	class:httplib::Response
get_header_value_count	httplib.h	/^inline size_t Request::get_header_value_count(const std::string &key) const {$/;"	f	class:httplib::Request
get_header_value_count	httplib.h	/^inline size_t Response::get_header_value_count(const std::string &key) const {$/;"	f	class:httplib::Response
get_header_value_u64	httplib.h	/^inline uint64_t Request::get_header_value_u64(const std::string &key,$/;"	f	class:httplib::Request
get_header_value_u64	httplib.h	/^inline uint64_t Response::get_header_value_u64(const std::string &key,$/;"	f	class:httplib::Response
get_header_value_u64	httplib.h	/^inline uint64_t get_header_value_u64(const Headers &headers,$/;"	f	namespace:httplib::detail
get_ip_and_port	httplib.h	/^inline bool get_ip_and_port(const struct sockaddr_storage &addr,$/;"	f	namespace:httplib::detail
get_local_ip_and_port	httplib.h	/^inline void BufferStream::get_local_ip_and_port(std::string & \/*ip*\/,$/;"	f	class:httplib::detail::BufferStream
get_local_ip_and_port	httplib.h	/^inline void SSLSocketStream::get_local_ip_and_port(std::string &ip,$/;"	f	class:httplib::detail::SSLSocketStream
get_local_ip_and_port	httplib.h	/^inline void SocketStream::get_local_ip_and_port(std::string &ip,$/;"	f	class:httplib::detail::SocketStream
get_local_ip_and_port	httplib.h	/^inline void get_local_ip_and_port(socket_t sock, std::string &ip, int &port) {$/;"	f	namespace:httplib::detail
get_multipart_content_provider	httplib.h	/^inline ContentProviderWithoutLength ClientImpl::get_multipart_content_provider($/;"	f	class:httplib::ClientImpl
get_multipart_ranges_data_length	httplib.h	/^inline size_t get_multipart_ranges_data_length(const Request &req,$/;"	f	namespace:httplib::detail
get_openssl_verify_result	httplib.h	/^inline long Client::get_openssl_verify_result() const {$/;"	f	class:httplib::Client
get_openssl_verify_result	httplib.h	/^inline long SSLClient::get_openssl_verify_result() const {$/;"	f	class:httplib::SSLClient
get_param_value	httplib.h	/^inline std::string Request::get_param_value(const std::string &key,$/;"	f	class:httplib::Request
get_param_value_count	httplib.h	/^inline size_t Request::get_param_value_count(const std::string &key) const {$/;"	f	class:httplib::Request
get_range_offset_and_length	httplib.h	/^get_range_offset_and_length(Range r, size_t content_length) {$/;"	f	namespace:httplib::detail
get_remote_ip_and_port	httplib.h	/^inline void BufferStream::get_remote_ip_and_port(std::string & \/*ip*\/,$/;"	f	class:httplib::detail::BufferStream
get_remote_ip_and_port	httplib.h	/^inline void SSLSocketStream::get_remote_ip_and_port(std::string &ip,$/;"	f	class:httplib::detail::SSLSocketStream
get_remote_ip_and_port	httplib.h	/^inline void SocketStream::get_remote_ip_and_port(std::string &ip,$/;"	f	class:httplib::detail::SocketStream
get_remote_ip_and_port	httplib.h	/^inline void get_remote_ip_and_port(socket_t sock, std::string &ip, int &port) {$/;"	f	namespace:httplib::detail
get_request_header_value	httplib.h	/^inline std::string Result::get_request_header_value(const std::string &key,$/;"	f	class:httplib::Result
get_request_header_value_count	httplib.h	/^Result::get_request_header_value_count(const std::string &key) const {$/;"	f	class:httplib::Result
get_request_header_value_u64	httplib.h	/^inline uint64_t Result::get_request_header_value_u64(const std::string &key,$/;"	f	class:httplib::Result
get_user_data	main.cpp	/^Json::Value get_user_data(){$/;"	f
getline	httplib.h	/^inline bool stream_line_reader::getline() {$/;"	f	class:httplib::detail::stream_line_reader
glowable_buffer_	httplib.h	/^  std::string glowable_buffer_;$/;"	m	class:httplib::detail::stream_line_reader
gzip_compressor	httplib.h	/^inline gzip_compressor::gzip_compressor() {$/;"	f	class:httplib::detail::gzip_compressor
gzip_decompressor	httplib.h	/^inline gzip_decompressor::gzip_decompressor() {$/;"	f	class:httplib::detail::gzip_decompressor
hFile_	httplib.h	/^  HANDLE hFile_ = NULL;$/;"	m	class:httplib::detail::mmap
hMapping_	httplib.h	/^  HANDLE hMapping_ = NULL;$/;"	m	class:httplib::detail::mmap
handle_EINTR	httplib.h	/^template <typename T> inline ssize_t handle_EINTR(T fn) {$/;"	f	namespace:httplib::detail
handle_file_request	httplib.h	/^inline bool Server::handle_file_request(const Request &req, Response &res,$/;"	f	class:httplib::Server
handle_request	httplib.h	/^inline bool ClientImpl::handle_request(Stream &strm, Request &req,$/;"	f	class:httplib::ClientImpl
has_crlf	httplib.h	/^inline bool has_crlf(const std::string &s) {$/;"	f	namespace:httplib::detail
has_file	httplib.h	/^inline bool Request::has_file(const std::string &key) const {$/;"	f	class:httplib::Request
has_header	httplib.h	/^inline bool Request::has_header(const std::string &key) const {$/;"	f	class:httplib::Request
has_header	httplib.h	/^inline bool Response::has_header(const std::string &key) const {$/;"	f	class:httplib::Response
has_header	httplib.h	/^inline bool has_header(const Headers &headers, const std::string &key) {$/;"	f	namespace:httplib::detail
has_param	httplib.h	/^inline bool Request::has_param(const std::string &key) const {$/;"	f	class:httplib::Request
has_request_header	httplib.h	/^inline bool Result::has_request_header(const std::string &key) const {$/;"	f	class:httplib::Result
hash	httplib.h	/^struct hash {$/;"	s	namespace:httplib::detail::case_ignore
hash_core	httplib.h	/^  size_t hash_core(const char *s, size_t l, size_t h) const {$/;"	f	struct:httplib::detail::case_ignore::hash
header_writer_	httplib.h	/^  std::function<ssize_t(Stream &, Headers &)> header_writer_ =$/;"	m	class:httplib::ClientImpl
header_writer_	httplib.h	/^  std::function<ssize_t(Stream &, Headers &)> header_writer_ =$/;"	m	class:httplib::Server
headers	httplib.h	/^    Headers headers;$/;"	m	struct:httplib::Server::MountPointEntry
headers	httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Request
headers	httplib.h	/^  Headers headers;$/;"	m	struct:httplib::Response
host	cnf.h	/^const char* host = "39.107.59.4";$/;"	v
host	httplib.h	/^inline std::string Client::host() const { return cli_->host(); }$/;"	f	class:httplib::Client
host	httplib.h	/^inline std::string ClientImpl::host() const { return host_; }$/;"	f	class:httplib::ClientImpl
host_	httplib.h	/^  const std::string host_;$/;"	m	class:httplib::ClientImpl
host_and_port_	httplib.h	/^  const std::string host_and_port_;$/;"	m	class:httplib::ClientImpl
host_components_	httplib.h	/^  std::vector<std::string> host_components_;$/;"	m	class:httplib::final
hosted_at	httplib.h	/^inline std::string hosted_at(const std::string &hostname) {$/;"	f	namespace:httplib
hosted_at	httplib.h	/^inline void hosted_at(const std::string &hostname,$/;"	f	namespace:httplib
httplib	httplib.h	/^namespace httplib {$/;"	n
idle_interval_sec_	httplib.h	/^  time_t idle_interval_sec_ = CPPHTTPLIB_IDLE_INTERVAL_SECOND;$/;"	m	class:httplib::Server
idle_interval_usec_	httplib.h	/^  time_t idle_interval_usec_ = CPPHTTPLIB_IDLE_INTERVAL_USECOND;$/;"	m	class:httplib::Server
if2ip	httplib.h	/^inline std::string if2ip(int address_family, const std::string &ifn) {$/;"	f	namespace:httplib::detail
initialize_cert_	httplib.h	/^  std::once_flag initialize_cert_;$/;"	m	class:httplib::final
initialize_ssl	httplib.h	/^inline bool SSLClient::initialize_ssl(Socket &socket, Error &error) {$/;"	f	class:httplib::SSLClient
interface_	httplib.h	/^  std::string interface_;$/;"	m	class:httplib::ClientImpl
ipv6_v6only_	httplib.h	/^  bool ipv6_v6only_ = CPPHTTPLIB_IPV6_V6ONLY;$/;"	m	class:httplib::ClientImpl
ipv6_v6only_	httplib.h	/^  bool ipv6_v6only_ = CPPHTTPLIB_IPV6_V6ONLY;$/;"	m	class:httplib::Server
is_chunked_content_provider_	httplib.h	/^  bool is_chunked_content_provider_ = false;$/;"	m	struct:httplib::Request
is_chunked_content_provider_	httplib.h	/^  bool is_chunked_content_provider_ = false;$/;"	m	struct:httplib::Response
is_chunked_transfer_encoding	httplib.h	/^inline bool is_chunked_transfer_encoding(const Headers &headers) {$/;"	f	namespace:httplib::detail
is_connection_error	httplib.h	/^inline bool is_connection_error() {$/;"	f	namespace:httplib::detail
is_dir	httplib.h	/^inline bool FileStat::is_dir() const {$/;"	f	class:httplib::detail::FileStat
is_file	httplib.h	/^inline bool FileStat::is_file() const {$/;"	f	class:httplib::detail::FileStat
is_hex	httplib.h	/^inline bool is_hex(char c, int &v) {$/;"	f	namespace:httplib::detail
is_multipart_boundary_chars_valid	httplib.h	/^inline bool is_multipart_boundary_chars_valid(const std::string &boundary) {$/;"	f	namespace:httplib::detail
is_multipart_form_data	httplib.h	/^inline bool Request::is_multipart_form_data() const {$/;"	f	class:httplib::Request
is_open	httplib.h	/^    bool is_open() const { return sock != INVALID_SOCKET; }$/;"	f	struct:httplib::ClientImpl::Socket
is_open	httplib.h	/^inline bool mmap::is_open() const {$/;"	f	class:httplib::detail::mmap
is_open_empty_file	httplib.h	/^  bool is_open_empty_file = false;$/;"	m	class:httplib::detail::mmap
is_readable	httplib.h	/^inline bool BufferStream::is_readable() const { return true; }$/;"	f	class:httplib::detail::BufferStream
is_readable	httplib.h	/^inline bool SSLSocketStream::is_readable() const {$/;"	f	class:httplib::detail::SSLSocketStream
is_readable	httplib.h	/^inline bool SocketStream::is_readable() const {$/;"	f	class:httplib::detail::SocketStream
is_running	httplib.h	/^inline bool Server::is_running() const { return is_running_; }$/;"	f	class:httplib::Server
is_socket_alive	httplib.h	/^inline bool is_socket_alive(socket_t sock) {$/;"	f	namespace:httplib::detail
is_socket_open	httplib.h	/^inline size_t Client::is_socket_open() const { return cli_->is_socket_open(); }$/;"	f	class:httplib::Client
is_socket_open	httplib.h	/^inline size_t ClientImpl::is_socket_open() const {$/;"	f	class:httplib::ClientImpl
is_space_or_tab	httplib.h	/^inline bool is_space_or_tab(char c) { return c == ' ' || c == '\\t'; }$/;"	f	namespace:httplib::detail
is_ssl	httplib.h	/^inline bool ClientImpl::is_ssl() const { return false; }$/;"	f	class:httplib::ClientImpl
is_ssl	httplib.h	/^inline bool SSLClient::is_ssl() const { return true; }$/;"	f	class:httplib::SSLClient
is_ssl_	httplib.h	/^  bool is_ssl_ = false;$/;"	m	class:httplib::Client
is_valid	httplib.h	/^  bool is_valid() const { return is_valid_; }$/;"	f	class:httplib::detail::MultipartFormDataParser
is_valid	httplib.h	/^inline bool Client::is_valid() const {$/;"	f	class:httplib::Client
is_valid	httplib.h	/^inline bool ClientImpl::is_valid() const { return true; }$/;"	f	class:httplib::ClientImpl
is_valid	httplib.h	/^inline bool SSLClient::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLClient
is_valid	httplib.h	/^inline bool SSLServer::is_valid() const { return ctx_; }$/;"	f	class:httplib::SSLServer
is_valid	httplib.h	/^inline bool Server::is_valid() const { return true; }$/;"	f	class:httplib::Server
is_valid	httplib.h	/^inline bool brotli_decompressor::is_valid() const { return decoder_s; }$/;"	f	class:httplib::detail::brotli_decompressor
is_valid	httplib.h	/^inline bool gzip_decompressor::is_valid() const { return is_valid_; }$/;"	f	class:httplib::detail::gzip_decompressor
is_valid_	httplib.h	/^  bool is_valid_ = false;$/;"	m	class:httplib::detail::MultipartFormDataParser
is_valid_	httplib.h	/^  bool is_valid_ = false;$/;"	m	class:httplib::detail::WSInit
is_valid_	httplib.h	/^  bool is_valid_ = false;$/;"	m	class:httplib::detail::final
is_valid_path	httplib.h	/^inline bool is_valid_path(const std::string &path) {$/;"	f	namespace:httplib::detail
is_writable	httplib.h	/^  std::function<bool()> is_writable;$/;"	m	class:httplib::DataSink
is_writable	httplib.h	/^inline bool BufferStream::is_writable() const { return true; }$/;"	f	class:httplib::detail::BufferStream
is_writable	httplib.h	/^inline bool SSLSocketStream::is_writable() const {$/;"	f	class:httplib::detail::SSLSocketStream
is_writable	httplib.h	/^inline bool SocketStream::is_writable() const {$/;"	f	class:httplib::detail::SocketStream
jobs_	httplib.h	/^  std::list<std::function<void()>> jobs_;$/;"	m	class:httplib::final
keep_alive	httplib.h	/^inline bool keep_alive(const std::atomic<socket_t> &svr_sock, socket_t sock,$/;"	f	namespace:httplib::detail
keep_alive_	httplib.h	/^  bool keep_alive_ = false;$/;"	m	class:httplib::ClientImpl
keep_alive_max_count_	httplib.h	/^  size_t keep_alive_max_count_ = CPPHTTPLIB_KEEPALIVE_MAX_COUNT;$/;"	m	class:httplib::Server
keep_alive_timeout_sec_	httplib.h	/^  time_t keep_alive_timeout_sec_ = CPPHTTPLIB_KEEPALIVE_TIMEOUT_SECOND;$/;"	m	class:httplib::Server
listen	httplib.h	/^inline bool Server::listen(const std::string &host, int port,$/;"	f	class:httplib::Server
listen_after_bind	httplib.h	/^inline bool Server::listen_after_bind() { return listen_internal(); }$/;"	f	class:httplib::Server
listen_internal	httplib.h	/^inline bool Server::listen_internal() {$/;"	f	class:httplib::Server
loadWebPages	index.cpp	/^void loadWebPages() {$/;"	f
load_ca_cert_store	httplib.h	/^inline void Client::load_ca_cert_store(const char *ca_cert, std::size_t size) {$/;"	f	class:httplib::Client
load_ca_cert_store	httplib.h	/^inline void SSLClient::load_ca_cert_store(const char *ca_cert,$/;"	f	class:httplib::SSLClient
load_certs	httplib.h	/^inline bool SSLClient::load_certs() {$/;"	f	class:httplib::SSLClient
load_system_certs_on_macos	httplib.h	/^inline bool load_system_certs_on_macos(X509_STORE *store) {$/;"	f	namespace:httplib::detail
load_system_certs_on_windows	httplib.h	/^inline bool load_system_certs_on_windows(X509_STORE *store) {$/;"	f	namespace:httplib::detail
local_addr	httplib.h	/^  std::string local_addr;$/;"	m	struct:httplib::Request
local_port	httplib.h	/^  int local_port = -1;$/;"	m	struct:httplib::Request
location	httplib.h	/^  std::string location; \/\/ Redirect location$/;"	m	struct:httplib::Response
logger_	httplib.h	/^  Logger logger_;$/;"	m	class:httplib::ClientImpl
logger_	httplib.h	/^  Logger logger_;$/;"	m	class:httplib::Server
main	index.cpp	/^int main() {$/;"	f
main	main.cpp	/^int main(){$/;"	f
make_basic_authentication_header	httplib.h	/^make_basic_authentication_header(const std::string &username,$/;"	f	namespace:httplib
make_bearer_token_authentication_header	httplib.h	/^make_bearer_token_authentication_header(const std::string &token,$/;"	f	namespace:httplib
make_content_range_header_field	httplib.h	/^inline std::string make_content_range_header_field($/;"	f	namespace:httplib::detail
make_digest_authentication_header	httplib.h	/^inline std::pair<std::string, std::string> make_digest_authentication_header($/;"	f	namespace:httplib::detail
make_matcher	httplib.h	/^Server::make_matcher(const std::string &pattern) {$/;"	f	class:httplib::Server
make_multipart_data_boundary	httplib.h	/^inline std::string make_multipart_data_boundary() {$/;"	f	namespace:httplib::detail
make_multipart_ranges_data	httplib.h	/^inline void make_multipart_ranges_data(const Request &req, Response &res,$/;"	f	namespace:httplib::detail
make_range_header	httplib.h	/^make_range_header(const Ranges &ranges) {$/;"	f	namespace:httplib
make_unique	httplib.h	/^make_unique(Args &&...args) {$/;"	f	namespace:httplib::detail
make_unique	httplib.h	/^make_unique(std::size_t n) {$/;"	f	namespace:httplib::detail
match	httplib.h	/^inline bool PathParamsMatcher::match(Request &request) const {$/;"	f	class:httplib::detail::PathParamsMatcher
match	httplib.h	/^inline bool RegexMatcher::match(Request &request) const {$/;"	f	class:httplib::detail::RegexMatcher
matches	httplib.h	/^  Match matches;$/;"	m	struct:httplib::Request
max_queued_requests_	httplib.h	/^  size_t max_queued_requests_ = 0;$/;"	m	class:httplib::final
message_digest	httplib.h	/^inline std::string message_digest(const std::string &s, const EVP_MD *algo) {$/;"	f	namespace:httplib::detail
method	httplib.h	/^  std::string method;$/;"	m	struct:httplib::Request
mmap	httplib.h	/^class mmap {$/;"	c	namespace:httplib::detail
mmap	httplib.h	/^inline mmap::mmap(const char *path) { open(path); }$/;"	f	class:httplib::detail::mmap
mount_point	httplib.h	/^    std::string mount_point;$/;"	m	struct:httplib::Server::MountPointEntry
multipart_reader_	httplib.h	/^  MultipartReader multipart_reader_;$/;"	m	class:httplib::ContentReader
mutex_	httplib.h	/^  std::mutex mutex_;$/;"	m	class:httplib::final
name	httplib.h	/^  std::string name;$/;"	m	struct:httplib::MultipartFormData
name	httplib.h	/^  std::string name;$/;"	m	struct:httplib::MultipartFormDataProvider
new_task_queue	httplib.h	/^  std::function<TaskQueue *(void)> new_task_queue;$/;"	m	class:httplib::Server
noexcept	httplib.h	/^  scope_exit(scope_exit &&rhs) noexcept$/;"	m	struct:httplib::detail::scope_exit
on_idle	httplib.h	/^  virtual void on_idle() {}$/;"	f	class:httplib::TaskQueue
open	httplib.h	/^inline bool mmap::open(const char *path) {$/;"	f	class:httplib::detail::mmap
operator !=	httplib.h	/^  bool operator!=(std::nullptr_t) const { return res_ != nullptr; }$/;"	f	class:httplib::Result
operator ()	httplib.h	/^    void operator()() {$/;"	f	struct:httplib::final::worker
operator ()	httplib.h	/^  bool operator()(ContentReceiver receiver) const {$/;"	f	class:httplib::ContentReader
operator ()	httplib.h	/^  bool operator()(MultipartContentHeader header,$/;"	f	class:httplib::ContentReader
operator ()	httplib.h	/^  bool operator()(const std::string &a, const std::string &b) const {$/;"	f	struct:httplib::detail::case_ignore::equal_to
operator ()	httplib.h	/^  bool operator()(size_t offset, size_t, DataSink &sink) {$/;"	f	class:httplib::detail::ContentProviderAdapter
operator ()	httplib.h	/^  size_t operator()(const std::string &key) const {$/;"	f	struct:httplib::detail::case_ignore::hash
operator *	httplib.h	/^  Response &operator*() { return *res_; }$/;"	f	class:httplib::Result
operator *	httplib.h	/^  const Response &operator*() const { return *res_; }$/;"	f	class:httplib::Result
operator ->	httplib.h	/^  Response *operator->() { return res_.get(); }$/;"	f	class:httplib::Result
operator ->	httplib.h	/^  const Response *operator->() const { return res_.get(); }$/;"	f	class:httplib::Result
operator <<	httplib.h	/^inline std::ostream &operator<<(std::ostream &os, const Error &obj) {$/;"	f	namespace:httplib
operator ==	httplib.h	/^  bool operator==(std::nullptr_t) const { return res_ == nullptr; }$/;"	f	class:httplib::Result
operator bool	httplib.h	/^  operator bool() const { return res_ != nullptr; }$/;"	f	class:httplib::Result
options_handlers_	httplib.h	/^  Handlers options_handlers_;$/;"	m	class:httplib::Server
os	httplib.h	/^  std::ostream os;$/;"	m	class:httplib::DataSink
override	httplib.h	/^                      std::function<bool(Stream &strm)> callback) override;$/;"	m	class:httplib::final
override	httplib.h	/^                  Callback callback) override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^                Callback callback) override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  bool create_and_connect_socket(Socket &socket, Error &error) override;$/;"	m	class:httplib::final
override	httplib.h	/^  bool is_readable() const override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  bool is_ssl() const override;$/;"	m	class:httplib::final
override	httplib.h	/^  bool is_valid() const override;$/;"	m	class:httplib::SSLServer
override	httplib.h	/^  bool is_valid() const override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  bool is_valid() const override;$/;"	m	class:httplib::final
override	httplib.h	/^  bool is_writable() const override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  bool match(Request &request) const override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  bool process_and_close_socket(socket_t sock) override;$/;"	m	class:httplib::SSLServer
override	httplib.h	/^  socket_t socket() const override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  ssize_t read(char *ptr, size_t size) override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  ssize_t write(const char *ptr, size_t size) override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  void get_local_ip_and_port(std::string &ip, int &port) const override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  void get_remote_ip_and_port(std::string &ip, int &port) const override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  void shutdown_ssl(Socket &socket, bool shutdown_gracefully) override;$/;"	m	class:httplib::final
override	httplib.h	/^  ~BufferStream() override = default;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  ~SSLClient() override;$/;"	m	class:httplib::final
override	httplib.h	/^  ~SSLServer() override;$/;"	m	class:httplib::SSLServer
override	httplib.h	/^  ~SSLSocketStream() override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  ~SocketStream() override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  ~ThreadPool() override = default;$/;"	m	class:httplib::final
override	httplib.h	/^  ~gzip_compressor() override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  ~gzip_decompressor() override;$/;"	m	class:httplib::detail::final
override	httplib.h	/^  ~nocompressor() override = default;$/;"	m	class:httplib::detail::final
param_names_	httplib.h	/^  std::vector<std::string> param_names_;$/;"	m	class:httplib::detail::final
params	httplib.h	/^  Params params;$/;"	m	struct:httplib::Request
params_to_query_str	httplib.h	/^inline std::string params_to_query_str(const Params &params) {$/;"	f	namespace:httplib::detail
parse	httplib.h	/^  bool parse(const char *buf, size_t n, const ContentReceiver &content_callback,$/;"	f	class:httplib::detail::MultipartFormDataParser
parse_disposition_params	httplib.h	/^inline void parse_disposition_params(const std::string &s, Params &params) {$/;"	f	namespace:httplib::detail
parse_header	httplib.h	/^inline bool parse_header(const char *beg, const char *end, T fn) {$/;"	f	namespace:httplib::detail
parse_multipart_boundary	httplib.h	/^inline bool parse_multipart_boundary(const std::string &content_type,$/;"	f	namespace:httplib::detail
parse_query_text	httplib.h	/^inline void parse_query_text(const char *data, std::size_t size,$/;"	f	namespace:httplib::detail
parse_query_text	httplib.h	/^inline void parse_query_text(const std::string &s, Params &params) {$/;"	f	namespace:httplib::detail
parse_range_header	httplib.h	/^inline bool parse_range_header(const std::string &s, Ranges &ranges) {$/;"	f	namespace:httplib::detail
parse_request_line	httplib.h	/^inline bool Server::parse_request_line(const char *s, Request &req) const {$/;"	f	class:httplib::Server
parse_www_authenticate	httplib.h	/^inline bool parse_www_authenticate(const Response &res,$/;"	f	namespace:httplib::detail
patch_handlers_	httplib.h	/^  Handlers patch_handlers_;$/;"	m	class:httplib::Server
patch_handlers_for_content_reader_	httplib.h	/^  HandlersForContentReader patch_handlers_for_content_reader_;$/;"	m	class:httplib::Server
path	httplib.h	/^  std::string path;$/;"	m	struct:httplib::Request
path_params	httplib.h	/^  std::unordered_map<std::string, std::string> path_params;$/;"	m	struct:httplib::Request
payload_max_length_	httplib.h	/^  size_t payload_max_length_ = CPPHTTPLIB_PAYLOAD_MAX_LENGTH;$/;"	m	class:httplib::Server
poll	httplib.h	10211;"	d
poll	httplib.h	193;"	d
pool_	httplib.h	/^    ThreadPool &pool_;$/;"	m	struct:httplib::final::worker
port	cnf.h	/^const int port = 33061;$/;"	v
port	httplib.h	/^inline int Client::port() const { return cli_->port(); }$/;"	f	class:httplib::Client
port	httplib.h	/^inline int ClientImpl::port() const { return port_; }$/;"	f	class:httplib::ClientImpl
port_	httplib.h	/^  const int port_;$/;"	m	class:httplib::ClientImpl
position	httplib.h	/^  size_t position = 0;$/;"	m	class:httplib::detail::final
post_handlers_	httplib.h	/^  Handlers post_handlers_;$/;"	m	class:httplib::Server
post_handlers_for_content_reader_	httplib.h	/^  HandlersForContentReader post_handlers_for_content_reader_;$/;"	m	class:httplib::Server
post_routing_handler_	httplib.h	/^  Handler post_routing_handler_;$/;"	m	class:httplib::Server
pre_routing_handler_	httplib.h	/^  HandlerWithResponse pre_routing_handler_;$/;"	m	class:httplib::Server
prepare_content_receiver	httplib.h	/^bool prepare_content_receiver(T &x, int &status,$/;"	f	namespace:httplib::detail
process_and_close_socket	httplib.h	/^inline bool SSLServer::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::SSLServer
process_and_close_socket	httplib.h	/^inline bool Server::process_and_close_socket(socket_t sock) {$/;"	f	class:httplib::Server
process_client_socket	httplib.h	/^inline bool process_client_socket(socket_t sock, time_t read_timeout_sec,$/;"	f	namespace:httplib::detail
process_client_socket_ssl	httplib.h	/^process_client_socket_ssl(SSL *ssl, socket_t sock, time_t read_timeout_sec,$/;"	f	namespace:httplib::detail
process_multipart_ranges_data	httplib.h	/^bool process_multipart_ranges_data(const Request &req,$/;"	f	namespace:httplib::detail
process_request	httplib.h	/^Server::process_request(Stream &strm, const std::string &remote_addr,$/;"	f	class:httplib::Server
process_request	httplib.h	/^inline bool ClientImpl::process_request(Stream &strm, Request &req,$/;"	f	class:httplib::ClientImpl
process_server_socket	httplib.h	/^process_server_socket(const std::atomic<socket_t> &svr_sock, socket_t sock,$/;"	f	namespace:httplib::detail
process_server_socket_core	httplib.h	/^process_server_socket_core(const std::atomic<socket_t> &svr_sock, socket_t sock,$/;"	f	namespace:httplib::detail
process_server_socket_ssl	httplib.h	/^inline bool process_server_socket_ssl($/;"	f	namespace:httplib::detail
process_socket	httplib.h	/^ClientImpl::process_socket(const Socket &socket,$/;"	f	class:httplib::ClientImpl
process_socket	httplib.h	/^SSLClient::process_socket(const Socket &socket,$/;"	f	class:httplib::SSLClient
progress	httplib.h	/^  Progress progress;$/;"	m	struct:httplib::Request
provider	httplib.h	/^  ContentProviderWithoutLength provider;$/;"	m	struct:httplib::MultipartFormDataProvider
proxy_basic_auth_password_	httplib.h	/^  std::string proxy_basic_auth_password_;$/;"	m	class:httplib::ClientImpl
proxy_basic_auth_username_	httplib.h	/^  std::string proxy_basic_auth_username_;$/;"	m	class:httplib::ClientImpl
proxy_bearer_token_auth_token_	httplib.h	/^  std::string proxy_bearer_token_auth_token_;$/;"	m	class:httplib::ClientImpl
proxy_digest_auth_password_	httplib.h	/^  std::string proxy_digest_auth_password_;$/;"	m	class:httplib::ClientImpl
proxy_digest_auth_username_	httplib.h	/^  std::string proxy_digest_auth_username_;$/;"	m	class:httplib::ClientImpl
proxy_host_	httplib.h	/^  std::string proxy_host_;$/;"	m	class:httplib::ClientImpl
proxy_port_	httplib.h	/^  int proxy_port_ = -1;$/;"	m	class:httplib::ClientImpl
ptr	httplib.h	/^inline const char *stream_line_reader::ptr() const {$/;"	f	class:httplib::detail::stream_line_reader
put_handlers_	httplib.h	/^  Handlers put_handlers_;$/;"	m	class:httplib::Server
put_handlers_for_content_reader_	httplib.h	/^  HandlersForContentReader put_handlers_for_content_reader_;$/;"	m	class:httplib::Server
pwd	cnf.h	/^const char* pwd = "shuwen-shop!#123456!#";$/;"	v
random_string	httplib.h	/^inline std::string random_string(size_t length) {$/;"	f	namespace:httplib::detail
range_error	httplib.h	/^inline bool range_error(Request &req, Response &res) {$/;"	f	namespace:httplib::detail
ranges	httplib.h	/^  Ranges ranges;$/;"	m	struct:httplib::Request
read	httplib.h	/^inline ssize_t BufferStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::detail::BufferStream
read	httplib.h	/^inline ssize_t SSLSocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::detail::SSLSocketStream
read	httplib.h	/^inline ssize_t SocketStream::read(char *ptr, size_t size) {$/;"	f	class:httplib::detail::SocketStream
read_buff_	httplib.h	/^  std::vector<char> read_buff_;$/;"	m	class:httplib::detail::final
read_buff_content_size_	httplib.h	/^  size_t read_buff_content_size_ = 0;$/;"	m	class:httplib::detail::final
read_buff_off_	httplib.h	/^  size_t read_buff_off_ = 0;$/;"	m	class:httplib::detail::final
read_buff_size_	httplib.h	/^  static const size_t read_buff_size_ = 1024l * 4;$/;"	m	class:httplib::detail::final
read_content	httplib.h	/^bool read_content(Stream &strm, T &x, size_t payload_max_length, int &status,$/;"	f	namespace:httplib::detail
read_content	httplib.h	/^inline bool Server::read_content(Stream &strm, Request &req, Response &res) {$/;"	f	class:httplib::Server
read_content_chunked	httplib.h	/^inline bool read_content_chunked(Stream &strm, T &x,$/;"	f	namespace:httplib::detail
read_content_core	httplib.h	/^Server::read_content_core(Stream &strm, Request &req, Response &res,$/;"	f	class:httplib::Server
read_content_with_content_receiver	httplib.h	/^inline bool Server::read_content_with_content_receiver($/;"	f	class:httplib::Server
read_content_with_length	httplib.h	/^inline bool read_content_with_length(Stream &strm, uint64_t len,$/;"	f	namespace:httplib::detail
read_content_without_length	httplib.h	/^inline bool read_content_without_length(Stream &strm,$/;"	f	namespace:httplib::detail
read_file	httplib.h	/^inline void read_file(const std::string &path, std::string &out) {$/;"	f	namespace:httplib::detail
read_headers	httplib.h	/^inline bool read_headers(Stream &strm, Headers &headers) {$/;"	f	namespace:httplib::detail
read_response_line	httplib.h	/^inline bool ClientImpl::read_response_line(Stream &strm, const Request &req,$/;"	f	class:httplib::ClientImpl
read_socket	httplib.h	/^inline ssize_t read_socket(socket_t sock, void *ptr, size_t size, int flags) {$/;"	f	namespace:httplib::detail
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_ = CPPHTTPLIB_CLIENT_READ_TIMEOUT_SECOND;$/;"	m	class:httplib::ClientImpl
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_ = CPPHTTPLIB_SERVER_READ_TIMEOUT_SECOND;$/;"	m	class:httplib::Server
read_timeout_sec_	httplib.h	/^  time_t read_timeout_sec_;$/;"	m	class:httplib::detail::final
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_ = CPPHTTPLIB_CLIENT_READ_TIMEOUT_USECOND;$/;"	m	class:httplib::ClientImpl
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_ = CPPHTTPLIB_SERVER_READ_TIMEOUT_USECOND;$/;"	m	class:httplib::Server
read_timeout_usec_	httplib.h	/^  time_t read_timeout_usec_;$/;"	m	class:httplib::detail::final
reader_	httplib.h	/^  Reader reader_;$/;"	m	class:httplib::ContentReader
reason	httplib.h	/^  std::string reason;$/;"	m	struct:httplib::Response
redirect	httplib.h	/^inline bool ClientImpl::redirect(Request &req, Response &res, Error &error) {$/;"	f	class:httplib::ClientImpl
redirect	httplib.h	/^inline bool redirect(T &cli, Request &req, Response &res,$/;"	f	namespace:httplib::detail
redirect_count_	httplib.h	/^  size_t redirect_count_ = CPPHTTPLIB_REDIRECT_MAX_COUNT;$/;"	m	struct:httplib::Request
regex_	httplib.h	/^  std::regex regex_;$/;"	m	class:httplib::detail::final
release	httplib.h	/^  void release() { this->execute_on_destruction = false; }$/;"	f	struct:httplib::detail::scope_exit
remote_addr	httplib.h	/^  std::string remote_addr;$/;"	m	struct:httplib::Request
remote_port	httplib.h	/^  int remote_port = -1;$/;"	m	struct:httplib::Request
remove_mount_point	httplib.h	/^inline bool Server::remove_mount_point(const std::string &mount_point) {$/;"	f	class:httplib::Server
request_headers_	httplib.h	/^  Headers request_headers_;$/;"	m	class:httplib::Result
request_mutex_	httplib.h	/^  std::recursive_mutex request_mutex_;$/;"	m	class:httplib::ClientImpl
res_	httplib.h	/^  std::unique_ptr<Response> res_;$/;"	m	class:httplib::Result
response_handler	httplib.h	/^  ResponseHandler response_handler;$/;"	m	struct:httplib::Request
ret_	httplib.h	/^  int ret_ = -1;$/;"	m	struct:httplib::detail::FileStat
retrieve_certs_from_keychain	httplib.h	/^inline bool retrieve_certs_from_keychain(CFObjectPtr<CFArrayRef> &certs) {$/;"	f	namespace:httplib::detail
retrieve_root_certs_from_keychain	httplib.h	/^inline bool retrieve_root_certs_from_keychain(CFObjectPtr<CFArrayRef> &certs) {$/;"	f	namespace:httplib::detail
routing	httplib.h	/^inline bool Server::routing(Request &req, Response &res, Stream &strm) {$/;"	f	class:httplib::Server
sb_	httplib.h	/^  data_sink_streambuf sb_;$/;"	m	class:httplib::DataSink
scope_exit	httplib.h	/^  explicit scope_exit(std::function<void(void)> &&f)$/;"	f	struct:httplib::detail::scope_exit
scope_exit	httplib.h	/^struct scope_exit {$/;"	s	namespace:httplib::detail
select_read	httplib.h	/^inline ssize_t select_read(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
select_write	httplib.h	/^inline ssize_t select_write(socket_t sock, time_t sec, time_t usec) {$/;"	f	namespace:httplib::detail
send	httplib.h	/^inline Result Client::send(const Request &req) { return cli_->send(req); }$/;"	f	class:httplib::Client
send	httplib.h	/^inline Result ClientImpl::send(const Request &req) {$/;"	f	class:httplib::ClientImpl
send	httplib.h	/^inline bool Client::send(Request &req, Response &res, Error &error) {$/;"	f	class:httplib::Client
send	httplib.h	/^inline bool ClientImpl::send(Request &req, Response &res, Error &error) {$/;"	f	class:httplib::ClientImpl
sendVideo	main.cpp	/^void sendVideo(const httplib::Request& req,httplib::Response& res){$/;"	f
send_	httplib.h	/^inline Result ClientImpl::send_(Request &&req) {$/;"	f	class:httplib::ClientImpl
send_	httplib.h	/^inline bool ClientImpl::send_(Request &req, Response &res, Error &error) {$/;"	f	class:httplib::ClientImpl
send_socket	httplib.h	/^inline ssize_t send_socket(socket_t sock, const void *ptr, size_t size,$/;"	f	namespace:httplib::detail
send_with_content_provider	httplib.h	/^inline Result ClientImpl::send_with_content_provider($/;"	f	class:httplib::ClientImpl
send_with_content_provider	httplib.h	/^inline std::unique_ptr<Response> ClientImpl::send_with_content_provider($/;"	f	class:httplib::ClientImpl
separator	httplib.h	/^  static constexpr char separator = '\/';$/;"	m	class:httplib::detail::final
serialize_multipart_formdata	httplib.h	/^serialize_multipart_formdata(const MultipartFormDataItems &items,$/;"	f	namespace:httplib::detail
serialize_multipart_formdata_finish	httplib.h	/^serialize_multipart_formdata_finish(const std::string &boundary) {$/;"	f	namespace:httplib::detail
serialize_multipart_formdata_get_content_type	httplib.h	/^serialize_multipart_formdata_get_content_type(const std::string &boundary) {$/;"	f	namespace:httplib::detail
serialize_multipart_formdata_item_begin	httplib.h	/^serialize_multipart_formdata_item_begin(const T &item,$/;"	f	namespace:httplib::detail
serialize_multipart_formdata_item_end	httplib.h	/^inline std::string serialize_multipart_formdata_item_end() { return "\\r\\n"; }$/;"	f	namespace:httplib::detail
servePage	index.cpp	/^void servePage(int client_socket, const std::string& page_path) {$/;"	f
server_certificate_verification_	httplib.h	/^  bool server_certificate_verification_ = true;$/;"	m	class:httplib::ClientImpl
server_certificate_verifier_	httplib.h	/^  std::function<bool(SSL *ssl)> server_certificate_verifier_;$/;"	m	class:httplib::ClientImpl
server_hostname_verification_	httplib.h	/^  bool server_hostname_verification_ = true;$/;"	m	class:httplib::ClientImpl
set_address_family	httplib.h	/^inline Server &Server::set_address_family(int family) {$/;"	f	class:httplib::Server
set_address_family	httplib.h	/^inline void Client::set_address_family(int family) {$/;"	f	class:httplib::Client
set_address_family	httplib.h	/^inline void ClientImpl::set_address_family(int family) {$/;"	f	class:httplib::ClientImpl
set_base_dir	httplib.h	/^inline bool Server::set_base_dir(const std::string &dir,$/;"	f	class:httplib::Server
set_basic_auth	httplib.h	/^inline void Client::set_basic_auth(const std::string &username,$/;"	f	class:httplib::Client
set_basic_auth	httplib.h	/^inline void ClientImpl::set_basic_auth(const std::string &username,$/;"	f	class:httplib::ClientImpl
set_bearer_token_auth	httplib.h	/^inline void Client::set_bearer_token_auth(const std::string &token) {$/;"	f	class:httplib::Client
set_bearer_token_auth	httplib.h	/^inline void ClientImpl::set_bearer_token_auth(const std::string &token) {$/;"	f	class:httplib::ClientImpl
set_boundary	httplib.h	/^  void set_boundary(std::string &&boundary) {$/;"	f	class:httplib::detail::MultipartFormDataParser
set_ca_cert_path	httplib.h	/^inline void Client::set_ca_cert_path(const std::string &ca_cert_file_path,$/;"	f	class:httplib::Client
set_ca_cert_path	httplib.h	/^inline void ClientImpl::set_ca_cert_path(const std::string &ca_cert_file_path,$/;"	f	class:httplib::ClientImpl
set_ca_cert_store	httplib.h	/^inline void Client::set_ca_cert_store(X509_STORE *ca_cert_store) {$/;"	f	class:httplib::Client
set_ca_cert_store	httplib.h	/^inline void ClientImpl::set_ca_cert_store(X509_STORE *ca_cert_store) {$/;"	f	class:httplib::ClientImpl
set_ca_cert_store	httplib.h	/^inline void SSLClient::set_ca_cert_store(X509_STORE *ca_cert_store) {$/;"	f	class:httplib::SSLClient
set_chunked_content_provider	httplib.h	/^inline void Response::set_chunked_content_provider($/;"	f	class:httplib::Response
set_compress	httplib.h	/^inline void Client::set_compress(bool on) { cli_->set_compress(on); }$/;"	f	class:httplib::Client
set_compress	httplib.h	/^inline void ClientImpl::set_compress(bool on) { compress_ = on; }$/;"	f	class:httplib::ClientImpl
set_connection_timeout	httplib.h	/^inline void Client::set_connection_timeout($/;"	f	class:httplib::Client
set_connection_timeout	httplib.h	/^inline void Client::set_connection_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Client
set_connection_timeout	httplib.h	/^inline void ClientImpl::set_connection_timeout($/;"	f	class:httplib::ClientImpl
set_connection_timeout	httplib.h	/^inline void ClientImpl::set_connection_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::ClientImpl
set_content	httplib.h	/^inline void Response::set_content(const char *s, size_t n,$/;"	f	class:httplib::Response
set_content	httplib.h	/^inline void Response::set_content(const std::string &s,$/;"	f	class:httplib::Response
set_content	httplib.h	/^inline void Response::set_content(std::string &&s,$/;"	f	class:httplib::Response
set_content_provider	httplib.h	/^inline void Response::set_content_provider($/;"	f	class:httplib::Response
set_decompress	httplib.h	/^inline void Client::set_decompress(bool on) { cli_->set_decompress(on); }$/;"	f	class:httplib::Client
set_decompress	httplib.h	/^inline void ClientImpl::set_decompress(bool on) { decompress_ = on; }$/;"	f	class:httplib::ClientImpl
set_default_file_mimetype	httplib.h	/^inline Server &Server::set_default_file_mimetype(const std::string &mime) {$/;"	f	class:httplib::Server
set_default_headers	httplib.h	/^inline Server &Server::set_default_headers(Headers headers) {$/;"	f	class:httplib::Server
set_default_headers	httplib.h	/^inline void Client::set_default_headers(Headers headers) {$/;"	f	class:httplib::Client
set_default_headers	httplib.h	/^inline void ClientImpl::set_default_headers(Headers headers) {$/;"	f	class:httplib::ClientImpl
set_digest_auth	httplib.h	/^inline void Client::set_digest_auth(const std::string &username,$/;"	f	class:httplib::Client
set_digest_auth	httplib.h	/^inline void ClientImpl::set_digest_auth(const std::string &username,$/;"	f	class:httplib::ClientImpl
set_error_handler	httplib.h	/^  Server &set_error_handler(ErrorHandlerFunc &&handler) {$/;"	f	class:httplib::Server
set_error_handler_core	httplib.h	/^inline Server &Server::set_error_handler_core(Handler handler,$/;"	f	class:httplib::Server
set_error_handler_core	httplib.h	/^inline Server &Server::set_error_handler_core(HandlerWithResponse handler,$/;"	f	class:httplib::Server
set_exception_handler	httplib.h	/^inline Server &Server::set_exception_handler(ExceptionHandler handler) {$/;"	f	class:httplib::Server
set_expect_100_continue_handler	httplib.h	/^Server::set_expect_100_continue_handler(Expect100ContinueHandler handler) {$/;"	f	class:httplib::Server
set_file_content	httplib.h	/^inline void Response::set_file_content(const std::string &path) {$/;"	f	class:httplib::Response
set_file_content	httplib.h	/^inline void Response::set_file_content(const std::string &path,$/;"	f	class:httplib::Response
set_file_extension_and_mimetype_mapping	httplib.h	/^Server::set_file_extension_and_mimetype_mapping(const std::string &ext,$/;"	f	class:httplib::Server
set_file_request_handler	httplib.h	/^inline Server &Server::set_file_request_handler(Handler handler) {$/;"	f	class:httplib::Server
set_follow_location	httplib.h	/^inline void Client::set_follow_location(bool on) {$/;"	f	class:httplib::Client
set_follow_location	httplib.h	/^inline void ClientImpl::set_follow_location(bool on) { follow_location_ = on; }$/;"	f	class:httplib::ClientImpl
set_header	httplib.h	/^inline void Request::set_header(const std::string &key,$/;"	f	class:httplib::Request
set_header	httplib.h	/^inline void Response::set_header(const std::string &key,$/;"	f	class:httplib::Response
set_header_writer	httplib.h	/^inline Server &Server::set_header_writer($/;"	f	class:httplib::Server
set_header_writer	httplib.h	/^inline void Client::set_header_writer($/;"	f	class:httplib::Client
set_header_writer	httplib.h	/^inline void ClientImpl::set_header_writer($/;"	f	class:httplib::ClientImpl
set_hostname_addr_map	httplib.h	/^Client::set_hostname_addr_map(std::map<std::string, std::string> addr_map) {$/;"	f	class:httplib::Client
set_hostname_addr_map	httplib.h	/^ClientImpl::set_hostname_addr_map(std::map<std::string, std::string> addr_map) {$/;"	f	class:httplib::ClientImpl
set_idle_interval	httplib.h	/^Server::set_idle_interval(const std::chrono::duration<Rep, Period> &duration) {$/;"	f	class:httplib::Server
set_idle_interval	httplib.h	/^inline Server &Server::set_idle_interval(time_t sec, time_t usec) {$/;"	f	class:httplib::Server
set_interface	httplib.h	/^inline void Client::set_interface(const std::string &intf) {$/;"	f	class:httplib::Client
set_interface	httplib.h	/^inline void ClientImpl::set_interface(const std::string &intf) {$/;"	f	class:httplib::ClientImpl
set_ipv6_v6only	httplib.h	/^inline Server &Server::set_ipv6_v6only(bool on) {$/;"	f	class:httplib::Server
set_ipv6_v6only	httplib.h	/^inline void ClientImpl::set_ipv6_v6only(bool on) { ipv6_v6only_ = on; }$/;"	f	class:httplib::ClientImpl
set_keep_alive	httplib.h	/^inline void Client::set_keep_alive(bool on) { cli_->set_keep_alive(on); }$/;"	f	class:httplib::Client
set_keep_alive	httplib.h	/^inline void ClientImpl::set_keep_alive(bool on) { keep_alive_ = on; }$/;"	f	class:httplib::ClientImpl
set_keep_alive_max_count	httplib.h	/^inline Server &Server::set_keep_alive_max_count(size_t count) {$/;"	f	class:httplib::Server
set_keep_alive_timeout	httplib.h	/^inline Server &Server::set_keep_alive_timeout(time_t sec) {$/;"	f	class:httplib::Server
set_logger	httplib.h	/^inline Server &Server::set_logger(Logger logger) {$/;"	f	class:httplib::Server
set_logger	httplib.h	/^inline void Client::set_logger(Logger logger) {$/;"	f	class:httplib::Client
set_logger	httplib.h	/^inline void ClientImpl::set_logger(Logger logger) {$/;"	f	class:httplib::ClientImpl
set_mount_point	httplib.h	/^inline bool Server::set_mount_point(const std::string &mount_point,$/;"	f	class:httplib::Server
set_nonblocking	httplib.h	/^inline void set_nonblocking(socket_t sock, bool nonblocking) {$/;"	f	namespace:httplib::detail
set_payload_max_length	httplib.h	/^inline Server &Server::set_payload_max_length(size_t length) {$/;"	f	class:httplib::Server
set_post_routing_handler	httplib.h	/^inline Server &Server::set_post_routing_handler(Handler handler) {$/;"	f	class:httplib::Server
set_pre_routing_handler	httplib.h	/^inline Server &Server::set_pre_routing_handler(HandlerWithResponse handler) {$/;"	f	class:httplib::Server
set_proxy	httplib.h	/^inline void Client::set_proxy(const std::string &host, int port) {$/;"	f	class:httplib::Client
set_proxy	httplib.h	/^inline void ClientImpl::set_proxy(const std::string &host, int port) {$/;"	f	class:httplib::ClientImpl
set_proxy_basic_auth	httplib.h	/^inline void Client::set_proxy_basic_auth(const std::string &username,$/;"	f	class:httplib::Client
set_proxy_basic_auth	httplib.h	/^inline void ClientImpl::set_proxy_basic_auth(const std::string &username,$/;"	f	class:httplib::ClientImpl
set_proxy_bearer_token_auth	httplib.h	/^inline void Client::set_proxy_bearer_token_auth(const std::string &token) {$/;"	f	class:httplib::Client
set_proxy_bearer_token_auth	httplib.h	/^inline void ClientImpl::set_proxy_bearer_token_auth(const std::string &token) {$/;"	f	class:httplib::ClientImpl
set_proxy_digest_auth	httplib.h	/^inline void Client::set_proxy_digest_auth(const std::string &username,$/;"	f	class:httplib::Client
set_proxy_digest_auth	httplib.h	/^inline void ClientImpl::set_proxy_digest_auth(const std::string &username,$/;"	f	class:httplib::ClientImpl
set_read_timeout	httplib.h	/^Client::set_read_timeout(const std::chrono::duration<Rep, Period> &duration) {$/;"	f	class:httplib::Client
set_read_timeout	httplib.h	/^Server::set_read_timeout(const std::chrono::duration<Rep, Period> &duration) {$/;"	f	class:httplib::Server
set_read_timeout	httplib.h	/^inline Server &Server::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Server
set_read_timeout	httplib.h	/^inline void Client::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Client
set_read_timeout	httplib.h	/^inline void ClientImpl::set_read_timeout($/;"	f	class:httplib::ClientImpl
set_read_timeout	httplib.h	/^inline void ClientImpl::set_read_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::ClientImpl
set_redirect	httplib.h	/^inline void Response::set_redirect(const std::string &url, int stat) {$/;"	f	class:httplib::Response
set_server_certificate_verifier	httplib.h	/^inline void Client::set_server_certificate_verifier($/;"	f	class:httplib::Client
set_server_certificate_verifier	httplib.h	/^inline void ClientImpl::set_server_certificate_verifier($/;"	f	class:httplib::ClientImpl
set_socket_options	httplib.h	/^inline Server &Server::set_socket_options(SocketOptions socket_options) {$/;"	f	class:httplib::Server
set_socket_options	httplib.h	/^inline void Client::set_socket_options(SocketOptions socket_options) {$/;"	f	class:httplib::Client
set_socket_options	httplib.h	/^inline void ClientImpl::set_socket_options(SocketOptions socket_options) {$/;"	f	class:httplib::ClientImpl
set_tcp_nodelay	httplib.h	/^inline Server &Server::set_tcp_nodelay(bool on) {$/;"	f	class:httplib::Server
set_tcp_nodelay	httplib.h	/^inline void Client::set_tcp_nodelay(bool on) { cli_->set_tcp_nodelay(on); }$/;"	f	class:httplib::Client
set_tcp_nodelay	httplib.h	/^inline void ClientImpl::set_tcp_nodelay(bool on) { tcp_nodelay_ = on; }$/;"	f	class:httplib::ClientImpl
set_url_encode	httplib.h	/^inline void Client::set_url_encode(bool on) { cli_->set_url_encode(on); }$/;"	f	class:httplib::Client
set_url_encode	httplib.h	/^inline void ClientImpl::set_url_encode(bool on) { url_encode_ = on; }$/;"	f	class:httplib::ClientImpl
set_write_timeout	httplib.h	/^Client::set_write_timeout(const std::chrono::duration<Rep, Period> &duration) {$/;"	f	class:httplib::Client
set_write_timeout	httplib.h	/^Server::set_write_timeout(const std::chrono::duration<Rep, Period> &duration) {$/;"	f	class:httplib::Server
set_write_timeout	httplib.h	/^inline Server &Server::set_write_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Server
set_write_timeout	httplib.h	/^inline void Client::set_write_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::Client
set_write_timeout	httplib.h	/^inline void ClientImpl::set_write_timeout($/;"	f	class:httplib::ClientImpl
set_write_timeout	httplib.h	/^inline void ClientImpl::set_write_timeout(time_t sec, time_t usec) {$/;"	f	class:httplib::ClientImpl
shutdown_	httplib.h	/^  bool shutdown_;$/;"	m	class:httplib::final
shutdown_socket	httplib.h	/^inline int shutdown_socket(socket_t sock) {$/;"	f	namespace:httplib::detail
shutdown_socket	httplib.h	/^inline void ClientImpl::shutdown_socket(Socket &socket) const {$/;"	f	class:httplib::ClientImpl
shutdown_ssl	httplib.h	/^inline void ClientImpl::shutdown_ssl(Socket & \/*socket*\/,$/;"	f	class:httplib::ClientImpl
shutdown_ssl	httplib.h	/^inline void SSLClient::shutdown_ssl(Socket &socket, bool shutdown_gracefully) {$/;"	f	class:httplib::SSLClient
shutdown_ssl_impl	httplib.h	/^inline void SSLClient::shutdown_ssl_impl(Socket &socket,$/;"	f	class:httplib::SSLClient
sink_	httplib.h	/^    DataSink &sink_;$/;"	m	class:httplib::DataSink::final
size	httplib.h	/^inline size_t mmap::size() const { return size_; }$/;"	f	class:httplib::detail::mmap
size	httplib.h	/^inline size_t stream_line_reader::size() const {$/;"	f	class:httplib::detail::stream_line_reader
size_	httplib.h	/^  size_t size_ = 0;$/;"	m	class:httplib::detail::mmap
skip_content_with_length	httplib.h	/^inline void skip_content_with_length(Stream &strm, uint64_t len) {$/;"	f	namespace:httplib::detail
sock	httplib.h	/^    socket_t sock = INVALID_SOCKET;$/;"	m	struct:httplib::ClientImpl::Socket
sock_	httplib.h	/^  socket_t sock_;$/;"	m	class:httplib::detail::final
socket	httplib.h	/^inline socket_t BufferStream::socket() const { return 0; }$/;"	f	class:httplib::detail::BufferStream
socket	httplib.h	/^inline socket_t Client::socket() const { return cli_->socket(); }$/;"	f	class:httplib::Client
socket	httplib.h	/^inline socket_t ClientImpl::socket() const { return socket_.sock; }$/;"	f	class:httplib::ClientImpl
socket	httplib.h	/^inline socket_t SSLSocketStream::socket() const { return sock_; }$/;"	f	class:httplib::detail::SSLSocketStream
socket	httplib.h	/^inline socket_t SocketStream::socket() const { return sock_; }$/;"	f	class:httplib::detail::SocketStream
socket_	httplib.h	/^  Socket socket_;$/;"	m	class:httplib::ClientImpl
socket_mutex_	httplib.h	/^  mutable std::mutex socket_mutex_;$/;"	m	class:httplib::ClientImpl
socket_options_	httplib.h	/^  SocketOptions socket_options_ = default_socket_options;$/;"	m	class:httplib::Server
socket_options_	httplib.h	/^  SocketOptions socket_options_ = nullptr;$/;"	m	class:httplib::ClientImpl
socket_requests_are_from_thread_	httplib.h	/^  std::thread::id socket_requests_are_from_thread_ = std::thread::id();$/;"	m	class:httplib::ClientImpl
socket_requests_in_flight_	httplib.h	/^  size_t socket_requests_in_flight_ = 0;$/;"	m	class:httplib::ClientImpl
socket_should_be_closed_when_request_is_done_	httplib.h	/^  bool socket_should_be_closed_when_request_is_done_ = false;$/;"	m	class:httplib::ClientImpl
split	httplib.h	/^inline void split(const char *b, const char *e, char d, size_t m,$/;"	f	namespace:httplib::detail
split	httplib.h	/^inline void split(const char *b, const char *e, char d,$/;"	f	namespace:httplib::detail
ssl	httplib.h	/^    SSL *ssl = nullptr;$/;"	m	struct:httplib::ClientImpl::Socket
ssl	httplib.h	/^  const SSL *ssl = nullptr;$/;"	m	struct:httplib::Request
ssl_	httplib.h	/^  SSL *ssl_;$/;"	m	class:httplib::detail::final
ssl_connect_or_accept_nonblocking	httplib.h	/^bool ssl_connect_or_accept_nonblocking(socket_t sock, SSL *ssl,$/;"	f	namespace:httplib::detail
ssl_context	httplib.h	/^inline SSL_CTX *Client::ssl_context() const {$/;"	f	class:httplib::Client
ssl_context	httplib.h	/^inline SSL_CTX *SSLClient::ssl_context() const { return ctx_; }$/;"	f	class:httplib::SSLClient
ssl_context	httplib.h	/^inline SSL_CTX *SSLServer::ssl_context() const { return ctx_; }$/;"	f	class:httplib::SSLServer
ssl_delete	httplib.h	/^inline void ssl_delete(std::mutex &ctx_mutex, SSL *ssl, socket_t sock,$/;"	f	namespace:httplib::detail
ssl_new	httplib.h	/^inline SSL *ssl_new(socket_t sock, SSL_CTX *ctx, std::mutex &ctx_mutex,$/;"	f	namespace:httplib::detail
sslinit_	httplib.h	/^static SSLInit sslinit_;$/;"	m	namespace:httplib::detail
st_	httplib.h	/^  struct _stat st_;$/;"	m	struct:httplib::detail::FileStat	typeref:struct:httplib::detail::FileStat::_stat
st_	httplib.h	/^  struct stat st_;$/;"	m	struct:httplib::detail::FileStat	typeref:struct:httplib::detail::FileStat::stat
start_with	httplib.h	/^  bool start_with(const std::string &a, size_t spos, size_t epos,$/;"	f	class:httplib::detail::MultipartFormDataParser
start_with_case_ignore	httplib.h	/^  bool start_with_case_ignore(const std::string &a,$/;"	f	class:httplib::detail::MultipartFormDataParser
state_	httplib.h	/^  BrotliEncoderState *state_ = nullptr;$/;"	m	class:httplib::detail::final
state_	httplib.h	/^  size_t state_ = 0;$/;"	m	class:httplib::detail::MultipartFormDataParser
static_fragments_	httplib.h	/^  std::vector<std::string> static_fragments_;$/;"	m	class:httplib::detail::final
status	httplib.h	/^  int status = -1;$/;"	m	struct:httplib::Response
status_message	httplib.h	/^inline const char *status_message(int status) {$/;"	f	namespace:httplib
stop	httplib.h	/^inline void Client::stop() { cli_->stop(); }$/;"	f	class:httplib::Client
stop	httplib.h	/^inline void ClientImpl::stop() {$/;"	f	class:httplib::ClientImpl
stop	httplib.h	/^inline void Server::stop() {$/;"	f	class:httplib::Server
str2tag	httplib.h	/^inline unsigned int str2tag(const std::string &s) {$/;"	f	namespace:httplib::detail
str2tag_core	httplib.h	/^inline constexpr unsigned int str2tag_core(const char *s, size_t l,$/;"	f	namespace:httplib::detail
stream_line_reader	httplib.h	/^class stream_line_reader {$/;"	c	namespace:httplib::detail
stream_line_reader	httplib.h	/^inline stream_line_reader::stream_line_reader(Stream &strm, char *fixed_buffer,$/;"	f	class:httplib::detail::stream_line_reader
strm_	httplib.h	/^  Stream &strm_;$/;"	m	class:httplib::detail::stream_line_reader
strm_	httplib.h	/^  z_stream strm_;$/;"	m	class:httplib::detail::final
target	httplib.h	/^  std::string target;$/;"	m	struct:httplib::Request
tcp_nodelay_	httplib.h	/^  bool tcp_nodelay_ = CPPHTTPLIB_TCP_NODELAY;$/;"	m	class:httplib::ClientImpl
tcp_nodelay_	httplib.h	/^  bool tcp_nodelay_ = CPPHTTPLIB_TCP_NODELAY;$/;"	m	class:httplib::Server
threads_	httplib.h	/^  std::vector<std::thread> threads_;$/;"	m	class:httplib::final
to_lower	httplib.h	/^inline unsigned char to_lower(int c) {$/;"	f	namespace:httplib::detail::case_ignore
to_string	httplib.h	/^inline std::string to_string(const Error error) {$/;"	f	namespace:httplib
to_utf8	httplib.h	/^inline size_t to_utf8(int code, char *buff) {$/;"	f	namespace:httplib::detail
trim	httplib.h	/^inline std::pair<size_t, size_t> trim(const char *b, const char *e, size_t left,$/;"	f	namespace:httplib::detail
trim_copy	httplib.h	/^inline std::string trim_copy(const std::string &s) {$/;"	f	namespace:httplib::detail
trim_double_quotes_copy	httplib.h	/^inline std::string trim_double_quotes_copy(const std::string &s) {$/;"	f	namespace:httplib::detail
u8string_to_wstring	httplib.h	/^std::wstring u8string_to_wstring(const char *s) {$/;"	f	namespace:httplib::detail
udl	httplib.h	/^namespace udl {$/;"	n	namespace:httplib::detail
unescape_abstract_namespace_unix_domain	httplib.h	/^unescape_abstract_namespace_unix_domain(const std::string &s) {$/;"	f	namespace:httplib::detail
unused_306	httplib.h	/^  unused_306 = 306,$/;"	e	enum:httplib::StatusCode
update_certs	httplib.h	/^inline void SSLServer::update_certs(X509 *cert, EVP_PKEY *private_key,$/;"	f	class:httplib::SSLServer
url_encode_	httplib.h	/^  bool url_encode_ = true;$/;"	m	class:httplib::ClientImpl
user	cnf.h	/^const char* user = "root";$/;"	v
value	httplib.h	/^  Response &value() { return *res_; }$/;"	f	class:httplib::Result
value	httplib.h	/^  const Response &value() const { return *res_; }$/;"	f	class:httplib::Result
verify_host	httplib.h	/^inline bool SSLClient::verify_host(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_host_with_common_name	httplib.h	/^inline bool SSLClient::verify_host_with_common_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_host_with_subject_alt_name	httplib.h	/^SSLClient::verify_host_with_subject_alt_name(X509 *server_cert) const {$/;"	f	class:httplib::SSLClient
verify_result_	httplib.h	/^  long verify_result_ = 0;$/;"	m	class:httplib::final
version	httplib.h	/^  std::string version;$/;"	m	struct:httplib::Request
version	httplib.h	/^  std::string version;$/;"	m	struct:httplib::Response
videoFilePath	main.cpp	/^const std::string videoFilePath = "123.mp4";$/;"	v
wait_until_ready	httplib.h	/^inline void Server::wait_until_ready() const {$/;"	f	class:httplib::Server
wait_until_socket_is_ready	httplib.h	/^inline Error wait_until_socket_is_ready(socket_t sock, time_t sec,$/;"	f	namespace:httplib::detail
web_pages	index.cpp	/^std::map<std::string, std::string> web_pages;$/;"	v
worker	httplib.h	/^    explicit worker(ThreadPool &pool) : pool_(pool) {}$/;"	f	struct:httplib::final::worker
worker	httplib.h	/^  struct worker {$/;"	s	class:httplib::final
write	httplib.h	/^  std::function<bool(const char *data, size_t data_len)> write;$/;"	m	class:httplib::DataSink
write	httplib.h	/^inline ssize_t BufferStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::detail::BufferStream
write	httplib.h	/^inline ssize_t SSLSocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::detail::SSLSocketStream
write	httplib.h	/^inline ssize_t SocketStream::write(const char *ptr, size_t size) {$/;"	f	class:httplib::detail::SocketStream
write	httplib.h	/^inline ssize_t Stream::write(const char *ptr) {$/;"	f	class:httplib::Stream
write	httplib.h	/^inline ssize_t Stream::write(const std::string &s) {$/;"	f	class:httplib::Stream
writeToResponse	main.cpp	/^void writeToResponse(httplib::Response& res,const char* buffer,size_t size){$/;"	f
write_content	httplib.h	/^inline bool write_content(Stream &strm, const ContentProvider &content_provider,$/;"	f	namespace:httplib::detail
write_content_chunked	httplib.h	/^inline bool write_content_chunked(Stream &strm,$/;"	f	namespace:httplib::detail
write_content_chunked	httplib.h	/^write_content_chunked(Stream &strm, const ContentProvider &content_provider,$/;"	f	namespace:httplib::detail
write_content_with_provider	httplib.h	/^Server::write_content_with_provider(Stream &strm, const Request &req,$/;"	f	class:httplib::Server
write_content_with_provider	httplib.h	/^inline bool ClientImpl::write_content_with_provider(Stream &strm,$/;"	f	class:httplib::ClientImpl
write_content_without_length	httplib.h	/^write_content_without_length(Stream &strm,$/;"	f	namespace:httplib::detail
write_data	httplib.h	/^inline bool write_data(Stream &strm, const char *d, size_t l) {$/;"	f	namespace:httplib::detail
write_headers	httplib.h	/^inline ssize_t write_headers(Stream &strm, const Headers &headers) {$/;"	f	namespace:httplib::detail
write_multipart_ranges_data	httplib.h	/^write_multipart_ranges_data(Stream &strm, const Request &req, Response &res,$/;"	f	namespace:httplib::detail
write_request	httplib.h	/^inline bool ClientImpl::write_request(Stream &strm, Request &req,$/;"	f	class:httplib::ClientImpl
write_request_line	httplib.h	/^inline ssize_t write_request_line(Stream &strm, const std::string &method,$/;"	f	namespace:httplib::detail
write_response	httplib.h	/^inline bool Server::write_response(Stream &strm, bool close_connection,$/;"	f	class:httplib::Server
write_response_core	httplib.h	/^inline bool Server::write_response_core(Stream &strm, bool close_connection,$/;"	f	class:httplib::Server
write_response_line	httplib.h	/^inline ssize_t write_response_line(Stream &strm, int status) {$/;"	f	namespace:httplib::detail
write_response_with_content	httplib.h	/^inline bool Server::write_response_with_content(Stream &strm,$/;"	f	class:httplib::Server
write_timeout_sec_	httplib.h	/^  time_t write_timeout_sec_ = CPPHTTPLIB_CLIENT_WRITE_TIMEOUT_SECOND;$/;"	m	class:httplib::ClientImpl
write_timeout_sec_	httplib.h	/^  time_t write_timeout_sec_ = CPPHTTPLIB_SERVER_WRITE_TIMEOUT_SECOND;$/;"	m	class:httplib::Server
write_timeout_sec_	httplib.h	/^  time_t write_timeout_sec_;$/;"	m	class:httplib::detail::final
write_timeout_usec_	httplib.h	/^  time_t write_timeout_usec_ = CPPHTTPLIB_CLIENT_WRITE_TIMEOUT_USECOND;$/;"	m	class:httplib::ClientImpl
write_timeout_usec_	httplib.h	/^  time_t write_timeout_usec_ = CPPHTTPLIB_SERVER_WRITE_TIMEOUT_USECOND;$/;"	m	class:httplib::Server
write_timeout_usec_	httplib.h	/^  time_t write_timeout_usec_;$/;"	m	class:httplib::detail::final
wsinit_	httplib.h	/^static WSInit wsinit_;$/;"	m	namespace:httplib::detail
~ClientImpl	httplib.h	/^inline ClientImpl::~ClientImpl() {$/;"	f	class:httplib::ClientImpl
~Response	httplib.h	/^  ~Response() {$/;"	f	struct:httplib::Response
~SSLClient	httplib.h	/^inline SSLClient::~SSLClient() {$/;"	f	class:httplib::SSLClient
~SSLServer	httplib.h	/^inline SSLServer::~SSLServer() {$/;"	f	class:httplib::SSLServer
~WSInit	httplib.h	/^  ~WSInit() {$/;"	f	class:httplib::detail::WSInit
~brotli_compressor	httplib.h	/^inline brotli_compressor::~brotli_compressor() {$/;"	f	class:httplib::detail::brotli_compressor
~brotli_decompressor	httplib.h	/^inline brotli_decompressor::~brotli_decompressor() {$/;"	f	class:httplib::detail::brotli_decompressor
~gzip_compressor	httplib.h	/^inline gzip_compressor::~gzip_compressor() { deflateEnd(&strm_); }$/;"	f	class:httplib::detail::gzip_compressor
~gzip_decompressor	httplib.h	/^inline gzip_decompressor::~gzip_decompressor() { inflateEnd(&strm_); }$/;"	f	class:httplib::detail::gzip_decompressor
~mmap	httplib.h	/^inline mmap::~mmap() { close(); }$/;"	f	class:httplib::detail::mmap
~scope_exit	httplib.h	/^  ~scope_exit() {$/;"	f	struct:httplib::detail::scope_exit
